To instruct **Replit Copilot Agent** (or any AI-powered code assistant) to conduct a **comprehensive codebase review** using your project‚Äôs `package.json` context, you'll want to create a clear, structured prompt that covers key categories such as architecture, type safety, performance, and dependency use.

Here's a prompt format you can copy/paste directly into Replit Copilot:

---

### üîç Full Codebase Review Request

Please perform a **comprehensive codebase review** for this project. Use the structure below to analyze all critical areas based on the project's `package.json` and its dependencies.

---

#### 1. **Project Architecture**

* Is the file and folder structure aligned with modern best practices for full-stack TypeScript + Express + React apps?
* Are server (`express`) and client (`react`) layers properly decoupled?
* Does the project use a coherent routing strategy (e.g., Wouter)?
* Are `tsx` files structured to support maintainability (components, hooks, utils, etc.)?

---

#### 2. **Type Safety**

* Are all interfaces, types, and zod schemas properly defined and used?
* Are there any `any` types or implicit types that should be explicitly defined?
* Are `drizzle-orm` and `drizzle-zod` schemas mapped correctly and consistently?

---

#### 3. **Form Handling**

* Review how `react-hook-form` and `@hookform/resolvers` are used.
* Are validations comprehensive and performant?
* Are there any repetitive or inefficient patterns?

---

#### 4. **UI Frameworks and State**

* Are `@radix-ui` components properly structured, styled, and consistent?
* How are `tailwindcss`, `tailwind-merge`, `tw-animate-css`, and `tailwindcss-animate` being used?
* Is `@tanstack/react-query` used effectively for server state management?

---

#### 5. **Authentication & Sessions**

* Review the integration of `passport`, `passport-local`, `express-session`, and `connect-pg-simple`.
* Are sessions secure and performant?
* Are login/register flows protected against common vulnerabilities?

---

#### 6. **Database Access**

* Is `drizzle-orm` used with efficient patterns (pagination, joins, indexing)?
* Are `db:push` migrations safe and versioned?
* Does the project use any raw SQL, and if so, are they sanitized?

---

#### 7. **Build & Dev Tools**

* Are scripts like `dev`, `build`, and `check` running reliably?
* Are `esbuild`, `vite`, and `tsx` configured optimally?
* Is the Replit runtime plugin (`@replit/vite-plugin-*`) necessary and beneficial?

---

#### 8. **Error Handling & Logging**

* How are errors handled across routes, services, and UI?
* Is there centralized error reporting (e.g., toast, modals, log capture)?

---

#### 9. **Optional/Unused Packages**

* Are there any unused or outdated dependencies?
* Could any dev dependencies be removed or moved to optional?

---

#### 10. **Performance Bottlenecks**

* Are any components or routes slow to render or load?
* Is code splitting or lazy loading implemented where appropriate?

---

Return a markdown report grouped by each section above, with concrete suggestions and Copilot-compatible prompts to fix any identified issues.

---

Let me know when you're ready and I‚Äôll help you run this step-by-step or tailor the prompt if you're targeting specific areas like backend performance or UI cleanup.

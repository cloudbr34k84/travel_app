[{"filePath":"/root/travel_app/client/src/@types/vite.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/App.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":21,"column":43,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":34,"column":52,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":57}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Sidebar } from \"@/components/common/sidebar\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\n\nimport Dashboard from \"@/pages/dashboard\";\nimport Destinations from \"@/pages/destinations\";\nimport Trips from \"@/pages/trips\";\nimport TripBuilder from \"@/pages/trip-builder\";\nimport Activities from \"@/pages/activities\";\nimport Accommodations from \"@/pages/accommodations\";\nimport Profile from \"@/pages/profile\";\nimport Settings from \"@/pages/settings\";\nimport AuthPage from \"@/pages/auth-page\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"flex flex-col min-h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"main-content flex-1 overflow-y-auto content-safe-area\">\n        <div className=\"page-container\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ProtectedLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <Layout>\n      {children}\n    </Layout>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      \n      <ProtectedRoute path=\"/\" component={() => (\n        <ProtectedLayout>\n          <Dashboard />\n        </ProtectedLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/destinations\" component={() => (\n        <ProtectedLayout>\n          <Destinations />\n        </ProtectedLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/trips\" component={() => (\n        <ProtectedLayout>\n          <Trips />\n        </ProtectedLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/trip-builder\" component={() => (\n        <ProtectedLayout>\n          <TripBuilder />\n        </ProtectedLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/activities\" component={() => (\n        <ProtectedLayout>\n          <Activities />\n        </ProtectedLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/accommodations\" component={() => (\n        <ProtectedLayout>\n          <Accommodations />\n        </ProtectedLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/profile\" component={() => (\n        <ProtectedLayout>\n          <Profile />\n        </ProtectedLayout>\n      )} />\n      \n      <ProtectedRoute path=\"/settings\" component={() => (\n        <ProtectedLayout>\n          <Settings />\n        </ProtectedLayout>\n      )} />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/accommodations/accommodation-card.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Building' is defined but never used.","line":3,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"Building"},"fix":{"range":[150,160],"text":""},"desc":"Remove unused variable 'Building'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'accommodation' is defined but never used.","line":10,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"accommodation"},"fix":{"range":[474,502],"text":""},"desc":"Remove unused variable 'accommodation'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":11,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[526,536],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'accommodation' is defined but never used.","line":12,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"accommodation"},"fix":{"range":[558,586],"text":""},"desc":"Remove unused variable 'accommodation'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MoreHorizontal, MapPin, Building } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Accommodation, Destination } from \"@shared/schema\";\n\ninterface AccommodationCardProps {\n  accommodation: Accommodation;\n  destination: Destination;\n  onEdit: (accommodation: Accommodation) => void;\n  onDelete: (id: number) => void;\n  onView: (accommodation: Accommodation) => void;\n}\n\nexport function AccommodationCard({\n  accommodation,\n  destination,\n  onEdit,\n  onDelete,\n  onView,\n}: AccommodationCardProps) {\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"relative h-44\">\n        <img\n          src={accommodation.image || \"https://images.unsplash.com/photo-1551882547-ff40c63fe5fa\"}\n          alt={accommodation.name}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute top-3 right-3\">\n          <span className=\"text-xs font-medium bg-amber-100 text-amber-800 rounded-full px-2 py-1\">\n            {accommodation.type}\n          </span>\n        </div>\n      </div>\n      <CardContent className=\"p-4\">\n        <h3 className=\"text-lg font-semibold text-gray-text mb-1\">{accommodation.name}</h3>\n        <div className=\"flex items-center text-xs text-gray-500 mb-2\">\n          <MapPin className=\"h-3 w-3 mr-1\" />\n          {destination.name}, {destination.country}\n        </div>\n      </CardContent>\n      <CardFooter className=\"p-4 pt-0 flex justify-between\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"text-primary border-primary hover:bg-primary/10\"\n          onClick={() => onView(accommodation)}\n        >\n          View Details\n        </Button>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\">\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={() => onEdit(accommodation)}>\n              Edit\n            </DropdownMenuItem>\n            <DropdownMenuItem \n              className=\"text-destructive focus:text-destructive\"\n              onClick={() => onDelete(accommodation.id)}\n            >\n              Delete\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </CardFooter>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/activities/activity-card.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'activity' is defined but never used.","line":10,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"activity"},"fix":{"range":[444,462],"text":""},"desc":"Remove unused variable 'activity'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":11,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[486,496],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'activity' is defined but never used.","line":12,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"activity"},"fix":{"range":[518,536],"text":""},"desc":"Remove unused variable 'activity'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MoreHorizontal, MapPin } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Activity, Destination } from \"@shared/schema\";\n\ninterface ActivityCardProps {\n  activity: Activity;\n  destination: Destination;\n  onEdit: (activity: Activity) => void;\n  onDelete: (id: number) => void;\n  onView: (activity: Activity) => void;\n}\n\nexport function ActivityCard({\n  activity,\n  destination,\n  onEdit,\n  onDelete,\n  onView,\n}: ActivityCardProps) {\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"relative h-44\">\n        <img\n          src={activity.image || \"https://images.unsplash.com/photo-1454942901704-3c44c11b2ad1\"}\n          alt={activity.name}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute top-3 right-3\">\n          <span className=\"text-xs font-medium bg-primary-800 text-white rounded-full px-2 py-1\">\n            {activity.category}\n          </span>\n        </div>\n      </div>\n      <CardContent className=\"p-4\">\n        <h3 className=\"text-lg font-semibold text-gray-text mb-1\">{activity.name}</h3>\n        <div className=\"flex items-center text-xs text-gray-500 mb-2\">\n          <MapPin className=\"h-3 w-3 mr-1\" />\n          {destination.name}, {destination.country}\n        </div>\n        <p className=\"text-sm text-gray-600 line-clamp-2\">{activity.description}</p>\n      </CardContent>\n      <CardFooter className=\"p-4 pt-0 flex justify-between\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"text-primary border-primary hover:bg-primary/10\"\n          onClick={() => onView(activity)}\n        >\n          View Details\n        </Button>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\">\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={() => onEdit(activity)}>\n              Edit\n            </DropdownMenuItem>\n            <DropdownMenuItem \n              className=\"text-destructive focus:text-destructive\"\n              onClick={() => onDelete(activity.id)}\n            >\n              Delete\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </CardFooter>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/common/mobile-sidebar.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'motion' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"motion"},"fix":{"range":[87,94],"text":""},"desc":"Remove unused variable 'motion'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AnimatePresence' is defined but never used.","line":3,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"AnimatePresence"},"fix":{"range":[93,110],"text":""},"desc":"Remove unused variable 'AnimatePresence'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":4,"suggestions":[{"messageId":"removeVar","data":{"varName":"X"},"fix":{"range":[255,260],"text":""},"desc":"Remove unused variable 'X'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is assigned a value but never used.","line":24,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[523,524],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { \n  Globe, \n  Building, \n  Plus, \n  MapPin, \n  Smile, \n  Home, \n  User, \n  Settings, \n  LogOut, \n  LogIn,\n  Menu,\n  X\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function MobileSidebar() {\n  const [location] = useLocation();\n  const [_, navigate] = useLocation();\n  const { user, logoutMutation } = useAuth();\n  const [open, setOpen] = useState(false);\n\n  const handleLogout = () => {\n    logoutMutation.mutate(undefined, {\n      onSuccess: () => {\n        setOpen(false);\n        navigate('/auth');\n      },\n    });\n  };\n\n  // Use all navigation links for the mobile sidebar\n  const links = [\n    { path: \"/\", label: \"Dashboard\", icon: Home },\n    { path: \"/trips\", label: \"Trips\", icon: Building },\n    { path: \"/trip-builder\", label: \"Trip Builder\", icon: Plus },\n    { path: \"/destinations\", label: \"Destinations\", icon: MapPin },\n    { path: \"/activities\", label: \"Activities\", icon: Smile },\n    { path: \"/accommodations\", label: \"Accommodations\", icon: Building },\n    { path: \"/profile\", label: \"Profile\", icon: User },\n    { path: \"/settings\", label: \"Settings\", icon: Settings },\n  ];\n\n  // Bottom navigation links (5 primary items)\n  const bottomNavLinks = links.slice(0, 5);\n\n  return (\n    <div className=\"sm:hidden\">\n      {/* Fixed top header with hamburger menu */}\n      <div className=\"fixed top-0 left-0 right-0 h-16 bg-white border-b border-gray-200 shadow-sm z-30 flex items-center justify-between px-4\">\n        <div className=\"flex items-center\">\n          <Globe className=\"h-8 w-8 text-primary mr-2\" />\n          <span className=\"text-gray-700 font-semibold text-lg\">TravelPlanner</span>\n        </div>\n        \n        <Sheet open={open} onOpenChange={setOpen}>\n          <SheetTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"h-10 w-10\">\n              <Menu className=\"h-6 w-6\" />\n              <span className=\"sr-only\">Toggle menu</span>\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"left\" className=\"p-0 w-[80%] max-w-[300px]\">\n            <div className=\"flex flex-col h-full\">\n              {/* Mobile Sidebar Header */}\n              <div className=\"flex items-center h-16 border-b border-gray-200 px-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Globe className=\"h-7 w-7 text-primary\" />\n                  <span className=\"text-gray-700 font-semibold text-lg\">TravelPlanner</span>\n                </div>\n              </div>\n              \n              {/* Mobile Sidebar Navigation */}\n              <div className=\"flex-1 overflow-y-auto py-4\">\n                <nav className=\"px-4 space-y-1\">\n                  {links.map((link) => (\n                    <Link key={link.path} href={link.path}>\n                      <div\n                        onClick={() => setOpen(false)}\n                        className={`flex items-center px-4 py-3 text-sm rounded-md cursor-pointer ${\n                          location === link.path\n                            ? \"bg-primary text-white\"\n                            : \"text-gray-700 hover:bg-gray-100\"\n                        }`}\n                      >\n                        <link.icon className=\"h-5 w-5 mr-3\" />\n                        <span>{link.label}</span>\n                      </div>\n                    </Link>\n                  ))}\n                </nav>\n              </div>\n              \n              {/* Mobile Sidebar Footer */}\n              <div className=\"border-t border-gray-200 p-4\">\n                {user ? (\n                  <Button \n                    variant=\"destructive\" \n                    className=\"w-full flex items-center justify-center\"\n                    onClick={handleLogout}\n                    disabled={logoutMutation.isPending}\n                  >\n                    <LogOut className=\"h-5 w-5 mr-2\" />\n                    <span>Logout</span>\n                  </Button>\n                ) : (\n                  <Link href=\"/auth\">\n                    <Button \n                      variant=\"secondary\" \n                      className=\"w-full flex items-center justify-center\"\n                      onClick={() => setOpen(false)}\n                    >\n                      <LogIn className=\"h-5 w-5 mr-2\" />\n                      <span>Login</span>\n                    </Button>\n                  </Link>\n                )}\n              </div>\n            </div>\n          </SheetContent>\n        </Sheet>\n      </div>\n\n      {/* Bottom navigation (simpler, with fewer items) */}\n      <div className=\"fixed bottom-0 left-0 right-0 w-full mobile-nav-height bg-white border-t border-gray-200 shadow-lg z-30\">\n        <nav className=\"flex justify-around items-center h-full px-1\">\n          {bottomNavLinks.map((link) => (\n            <Link key={link.path} href={link.path}>\n              <div\n                className={`flex flex-col items-center p-1 text-xs cursor-pointer transition-colors duration-200 ${\n                  location === link.path\n                    ? \"text-primary font-medium\"\n                    : \"text-gray-700 hover:text-primary\"\n                }`}\n              >\n                <link.icon className=\"h-6 w-6 mb-1\" />\n                <span className=\"whitespace-nowrap\">{link.label}</span>\n              </div>\n            </Link>\n          ))}\n          \n          {/* Mobile drawer menu trigger */}\n          <Sheet open={open} onOpenChange={setOpen}>\n            <SheetTrigger asChild>\n              <div className=\"flex flex-col items-center p-1 text-xs cursor-pointer text-gray-700 hover:text-primary\">\n                <Menu className=\"h-6 w-6 mb-1\" />\n                <span>Menu</span>\n              </div>\n            </SheetTrigger>\n          </Sheet>\n        </nav>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/common/page-header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/common/sidebar.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is assigned a value but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[359,360],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Link, useLocation } from \"wouter\";\nimport { Globe, Building, Plus, MapPin, Smile, Home, User, Settings, LogOut, LogIn } from \"lucide-react\";\nimport { useAuth } from \"@/hooks\";\nimport { Button } from \"@/components/ui/button\";\nimport { MobileSidebar } from \"./mobile-sidebar\";\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  const [_, navigate] = useLocation();\n  const { user, logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate(undefined, {\n      onSuccess: () => {\n        navigate('/auth');\n      },\n    });\n  };\n\n  const links = [\n    { path: \"/\", label: \"Dashboard\", icon: Home },\n    { path: \"/trips\", label: \"Trips\", icon: Building },\n    { path: \"/trip-builder\", label: \"Trip Builder\", icon: Plus },\n    { path: \"/destinations\", label: \"Destinations\", icon: MapPin },\n    { path: \"/activities\", label: \"Activities\", icon: Smile },\n    { path: \"/accommodations\", label: \"Accommodations\", icon: Building },\n    { path: \"/profile\", label: \"Profile\", icon: User },\n    { path: \"/settings\", label: \"Settings\", icon: Settings },\n  ];\n\n  // Desktop main navigation links\n  const mainNavLinks = links.slice(0, 6);\n  // Desktop footer links\n  const footerLinks = links.slice(6);\n\n  return (\n    <>\n      {/* Desktop sidebar */}\n      <div className=\"hidden sm:block fixed left-0 top-0 h-full bg-white shadow-lg z-10 sm:w-20 md:w-64 border-r border-gray-200\">\n        <div className=\"flex flex-col h-full\">\n          <div className=\"flex items-center justify-center h-16 border-b border-gray-200\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-primary\">\n                <Globe className=\"h-8 w-8\" />\n              </span>\n              <span className=\"sidebar-text hidden md:block text-gray-700 font-semibold text-lg\">TravelPlanner</span>\n            </div>\n          </div>\n          \n          <div className=\"flex-1 overflow-y-auto py-4\">\n            <nav className=\"px-4 space-y-1\">\n              {mainNavLinks.map((link) => (\n                <Link key={link.path} href={link.path}>\n                  <div\n                    className={`flex items-center px-4 py-3 text-sm rounded-md cursor-pointer ${\n                      location === link.path\n                        ? \"bg-primary text-white\"\n                        : \"text-gray-700 hover:bg-gray-100\"\n                    }`}\n                  >\n                    <link.icon className=\"h-5 w-5 sm:mr-0 md:mr-3\" />\n                    <span className=\"hidden md:block\">{link.label}</span>\n                  </div>\n                </Link>\n              ))}\n            </nav>\n          </div>\n          \n          <div className=\"border-t border-gray-200 pt-4 pb-3\">\n            <div className=\"px-4\">\n              {footerLinks.map((link) => (\n                <Link key={link.path} href={link.path}>\n                  <div\n                    className={`flex items-center px-4 py-3 text-sm rounded-md cursor-pointer ${\n                      location === link.path\n                        ? \"bg-primary text-white\"\n                        : \"text-gray-700 hover:bg-gray-100\"\n                    }`}\n                  >\n                    <link.icon className=\"h-5 w-5 sm:mr-0 md:mr-3\" />\n                    <span className=\"hidden md:block\">{link.label}</span>\n                  </div>\n                </Link>\n              ))}\n              \n              {/* Login/Logout Button */}\n              <div className=\"mt-4 px-4\">\n                {user ? (\n                  <Button \n                    variant=\"destructive\" \n                    className=\"w-full flex items-center justify-center\"\n                    onClick={handleLogout}\n                    disabled={logoutMutation.isPending}\n                  >\n                    <LogOut className=\"h-5 w-5 sm:mr-0 md:mr-2\" />\n                    <span className=\"hidden md:block\">Logout</span>\n                  </Button>\n                ) : (\n                  <Link href=\"/auth\">\n                    <Button \n                      variant=\"secondary\" \n                      className=\"w-full flex items-center justify-center\"\n                    >\n                      <LogIn className=\"h-5 w-5 sm:mr-0 md:mr-2\" />\n                      <span className=\"hidden md:block\">Login</span>\n                    </Button>\n                  </Link>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Sidebar */}\n      <MobileSidebar />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/common/stat-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/common/status-badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/destinations/destination-card.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":4,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"MapPin"},"fix":{"range":[177,185],"text":""},"desc":"Remove unused variable 'MapPin'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'destination' is defined but never used.","line":12,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"destination"},"fix":{"range":[522,546],"text":""},"desc":"Remove unused variable 'destination'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":13,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[570,580],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'destination' is defined but never used.","line":14,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"destination"},"fix":{"range":[602,626],"text":""},"desc":"Remove unused variable 'destination'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { MoreHorizontal, MapPin, Smile, Building } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Destination } from \"@shared/schema\";\n\ninterface DestinationCardProps {\n  destination: Destination;\n  activityCount: number;\n  accommodationCount: number;\n  onEdit: (destination: Destination) => void;\n  onDelete: (id: number) => void;\n  onView: (destination: Destination) => void;\n}\n\nexport function DestinationCard({\n  destination,\n  activityCount,\n  accommodationCount,\n  onEdit,\n  onDelete,\n  onView,\n}: DestinationCardProps) {\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"relative h-48\">\n        <img\n          src={destination.image}\n          alt={`${destination.name}, ${destination.country}`}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute top-3 right-3\">\n          <StatusBadge status={destination.status as \"visited\" | \"planned\" | \"wishlist\"} />\n        </div>\n      </div>\n      <div className=\"p-5\">\n        <h3 className=\"text-xl font-semibold text-gray-text mb-1\">{destination.name}</h3>\n        <p className=\"text-gray-500 text-sm mb-3\">\n          {destination.country}, {destination.region}\n        </p>\n        <div className=\"flex items-center justify-between mb-4\">\n          <span className=\"text-sm text-gray-500 flex items-center\">\n            <Smile className=\"h-4 w-4 mr-1 text-primary\" />\n            {activityCount} Activities\n          </span>\n          <span className=\"text-sm text-gray-500 flex items-center\">\n            <Building className=\"h-4 w-4 mr-1 text-primary\" />\n            {accommodationCount} Accommodations\n          </span>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button \n            className=\"flex-1 bg-primary hover:bg-primary-800\" \n            onClick={() => onView(destination)}\n          >\n            View Details\n          </Button>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"p-2\">\n                <MoreHorizontal className=\"h-5 w-5\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={() => onEdit(destination)}>\n                Edit\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                className=\"text-destructive focus:text-destructive\"\n                onClick={() => onDelete(destination.id)}\n              >\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/forms/accommodation-form.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":58,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[2163,2176],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'values' is defined but never used.","line":59,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"values"},"fix":{"range":[2200,2230],"text":""},"desc":"Remove unused variable 'values'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":60,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[2254,2266],"text":""},"desc":"Remove unused variable 'error'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":103,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[4555,4567],"text":""},"desc":"Remove unused variable 'error'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onError' is assigned a value but never used.","line":113,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"onError"},"fix":{"range":[4841,4856],"text":""},"desc":"Remove unused variable 'onError'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toast' is assigned a value but never used.","line":164,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":164,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"toast"},"fix":{"range":[6500,6529],"text":""},"desc":"Remove unused variable 'toast'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'jsonError' is defined but never used.","line":228,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":228,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'parseError' is defined but never used.","line":232,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":24}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport React, { forwardRef, useImperativeHandle } from \"react\";\nimport { Accommodation, Destination } from \"@shared/schema\";\nimport { insertAccommodationSchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n/**\n * Extended schema for accommodation form with additional fields and validations\n */\nexport const accommodationFormSchema = insertAccommodationSchema.extend({\n  image: z.string().url(\"Please enter a valid image URL\").optional(),\n});\n\n/**\n * Type definition for accommodation form values based on the schema\n */\nexport type AccommodationFormValues = z.infer<typeof accommodationFormSchema>;\n\n/**\n * Type definition for accommodation form submission values\n */\nexport type AccommodationApiValues = {\n  name: string;\n  type: string;\n  destinationId: number;\n  image?: string;\n  id?: number;\n};\n\n/**\n * Props interface for the AccommodationForm component\n * \n * @property open - Controls the visibility state of the accommodation form dialog\n * @property onOpenChange - Callback function that is triggered when dialog open state changes\n * @property onSubmit - Callback function that handles form submission with validated values\n * @property onError - Optional callback for handling server-side validation errors\n * @property defaultValues - Pre-populated values for editing an existing accommodation\n * @property isEditing - Flag indicating whether the form is in edit mode\n * @property isSubmitting - Flag indicating whether a submission is in progress\n */\nexport interface AccommodationFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSubmit: (values: AccommodationApiValues) => void;\n  onError?: (error: Error) => void;\n  defaultValues?: Partial<Accommodation>;\n  isEditing?: boolean;\n  isSubmitting?: boolean;\n}\n\n/**\n * Accommodation Form Component with Real-Time Validation and Server-Side Error Mapping\n * \n * This form implements comprehensive validation through two key mechanisms:\n * 1. Real-time client-side validation that provides immediate feedback as users type\n * 2. Server-side validation error mapping that associates backend validation failures with specific form fields\n * \n * @validation\n * - All fields use real-time validation triggered by the onChange event\n * - Name field validates for required input\n * - Type field validates for required selection\n * - Destination field validates for required selection\n * - Image URL field validates for proper URL format (optional field)\n * \n * @server_error_mapping\n * - When the server returns validation errors (400 status code), the component parses the response\n * - Field-specific errors are mapped directly to form fields using react-hook-form's setError function\n * - Expected error response format from server: { message: string, errors: { fieldName: string[] } }\n * - This creates a seamless experience where server validation appears directly in the UI\n * \n * @submit_button_behavior\n * - The submit button is disabled in two critical scenarios:\n *   1. When form validation fails (formState.isValid is false)\n *   2. During form submission to prevent duplicate requests (formState.isSubmitting or props.isSubmitting)\n * - Button text changes to reflect the current action (\"Adding...\" during submission)\n * - This prevents users from submitting invalid data and improves API request reliability\n * \n * @realtime_validation_guide\n * To implement similar real-time validation in other forms:\n * 1. Set useForm mode to \"onChange\" to validate as users type\n * 2. Use formState.errors to access field-specific error messages\n * 3. FormMessage components will automatically display validation errors\n * 4. The Submit button should be disabled with: disabled={!formState.isValid || formState.isSubmitting}\n * 5. For server error mapping, implement an error parsing function in the onSubmit handler that calls setError\n */\n// Define a type for the ref exposed by the form\ntype AccommodationFormRef = {\n  parseServerValidationErrors: (error: Error) => boolean;\n};\n\n// Use a named function for the forwardRef to improve debugging\nexport const AccommodationForm = forwardRef<AccommodationFormRef, AccommodationFormProps>(\n  function AccommodationForm(props, ref) {\n    const {\n      open,\n      onOpenChange,\n      onSubmit,\n      onError,\n      defaultValues,\n      isEditing = false,\n      isSubmitting = false,\n    } = props;\n\n    /**\n     * Prepares default values for the form with proper type conversion\n     * @returns Properly typed form values\n     */\n  const prepareDefaultValues = (): AccommodationFormValues => {\n    if (defaultValues) {\n      return {\n        name: defaultValues.name || \"\",\n        type: defaultValues.type || \"\",\n        destinationId: defaultValues.destinationId || 0,\n        // Handle null image values by converting to undefined\n        image: defaultValues.image === null ? undefined : defaultValues.image,\n      };\n    }\n    \n    // Default values for new accommodation\n    return {\n      name: \"\",\n      type: \"\",\n      destinationId: 0,\n      image: \"\",\n    };\n  };\n\n  /**\n   * Initialize the form with typesafe validation using Zod schema\n   * \n   * @configuration\n   * - mode: \"onChange\" - Enables real-time validation as users type\n   * - resolver: zodResolver - Validates form values against our Zod schema\n   * - defaultValues: Pre-populated values based on the current state (new or editing)\n   */\n  const form = useForm<AccommodationFormValues>({\n    resolver: zodResolver(accommodationFormSchema),\n    defaultValues: prepareDefaultValues(),\n    mode: \"onChange\", // Enable real-time validation\n  });\n  \n  /**\n   * Extract form state to access validation status and submission state\n   * Used for real-time validation feedback and conditional button disabling\n   * - formState.isValid: True when all form fields pass validation\n   * - formState.isSubmitting: True during form submission\n   */\n  const { formState, setError } = form;\n  const { toast } = useToast();\n\n  // Expose the parseServerValidationErrors function to parent components via ref\n  useImperativeHandle(ref, () => ({\n    parseServerValidationErrors: (error: Error) => {\n      return parseServerValidationErrors(error);\n    }\n  }));\n\n  // Use explicit typing for the destinations query\n  const { data: destinations, isLoading: isLoadingDestinations } = useQuery<Destination[]>({\n    queryKey: [\"/api/destinations\"],\n  });\n  \n  /**\n   * Parses server-side validation errors and maps them to form fields\n   * \n   * @param error - The error object returned from the server\n   * @returns boolean - Whether any field errors were mapped (true) or not (false)\n   */\n  const parseServerValidationErrors = (error: Error): boolean => {\n    try {\n      // The apiRequestWithJson function throws errors in format: \"Status: Message\"\n      if (!error.message) return false;\n      \n      // Check if it's a structured error with status code\n      const errorMatch = error.message.match(/^(\\d+): (.+)$/);\n      if (!errorMatch) return false;\n      \n      const [, statusCode, message] = errorMatch;\n      \n      // Only process 400 status errors (validation errors)\n      if (statusCode !== \"400\") return false;\n      \n      try {\n        // Try to parse the message as JSON which might contain field errors\n        const errorData = JSON.parse(message);\n        \n        // Check if the error response contains a fieldErrors or errors object\n        const fieldErrors = errorData.fieldErrors || errorData.errors;\n        \n        if (!fieldErrors || typeof fieldErrors !== 'object') return false;\n        \n        let errorsFound = false;\n        \n        // Map each field error to the corresponding form field\n        Object.entries(fieldErrors).forEach(([field, errorMessages]) => {\n          // For errors returned as arrays (e.g., ['Name is required'])\n          if (Array.isArray(errorMessages) && errorMessages.length > 0) {\n            setError(field as keyof AccommodationFormValues, { \n              message: errorMessages[0] as string \n            });\n            errorsFound = true;\n          } \n          // For errors returned as strings (e.g., 'Name is required')\n          else if (typeof errorMessages === 'string') {\n            setError(field as keyof AccommodationFormValues, { \n              message: errorMessages \n            });\n            errorsFound = true;\n          }\n        });\n        \n        return errorsFound;\n      } catch (jsonError) {\n        // If JSON parsing fails, it's not a structured field error\n        return false;\n      }\n    } catch (parseError) {\n      // If error parsing fails completely, just return false\n      return false;\n    }\n  };\n\n  const accommodationTypes = [\n    { value: \"Hotel\", label: \"Hotel\" },\n    { value: \"Resort\", label: \"Resort\" },\n    { value: \"Hostel\", label: \"Hostel\" },\n    { value: \"Apartment\", label: \"Apartment\" },\n    { value: \"Guesthouse\", label: \"Guesthouse\" },\n    { value: \"Villa\", label: \"Villa\" },\n    { value: \"Cabin\", label: \"Cabin\" },\n    { value: \"Camping\", label: \"Camping\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>{isEditing ? \"Edit Accommodation\" : \"Add New Accommodation\"}</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(\n            // Success handler - executed when form validation passes\n            (values: AccommodationFormValues) => {\n              // Convert form values to API values\n              const apiValues: AccommodationApiValues = {\n                ...values,\n                // Include id if we're editing\n                ...(isEditing && defaultValues?.id ? { id: defaultValues.id } : {})\n              };\n              \n              // Call the onSubmit callback provided by parent component\n              // Parent component will handle server errors and pass them back to us via onError callback\n              onSubmit(apiValues);\n            },\n            // Error handler - executed when client-side validation fails\n            (errors) => {\n              console.log(\"Form validation failed:\", errors);\n              // We don't need to do anything here as React Hook Form will\n              // automatically show validation messages for invalid fields\n            }\n          )} \n          className=\"space-y-4\">\n            {/* \n             * Name field with real-time validation\n             * Shows error message as user types if the field is empty\n             */}\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Accommodation Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Grand Hotel Paris\" \n                      {...field} \n                      onChange={(e) => {\n                        field.onChange(e);\n                        // This triggers validation as the user types\n                        form.trigger(\"name\");\n                      }}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            {/* \n             * Type selection field with real-time validation\n             * Validates as soon as user makes a selection\n             */}\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Type</FormLabel>\n                  <Select\n                    onValueChange={(value) => {\n                      field.onChange(value);\n                      // Trigger validation when selection changes\n                      form.trigger(\"type\");\n                    }}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger className={formState.errors.type ? \"border-red-500\" : \"\"}>\n                        <SelectValue placeholder=\"Select a type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {accommodationTypes.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            {/* \n             * Destination selection field with real-time validation and empty state handling\n             * \n             * @EmptyState\n             * - When no destinations are available, shows a message \"No destinations—add one\"\n             * - Provides a button to open the destination form modal directly from the dropdown\n             * - Uses a CustomEvent to communicate with parent component to open destination form\n             * - Improves UX by guiding users through the dependency chain (destinations must exist before accommodations)\n             * - The empty state always includes a call-to-action to ensure users can proceed\n             * \n             * @Validation\n             * - Shows validation error if no destination is selected\n             * - Validation is triggered on selection change\n             */}\n            <FormField\n              control={form.control}\n              name=\"destinationId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Destination</FormLabel>\n                  <Select\n                    onValueChange={(value) => {\n                      field.onChange(parseInt(value));\n                      // Trigger validation when selection changes\n                      form.trigger(\"destinationId\");\n                    }}\n                    defaultValue={field.value?.toString()}\n                    disabled={isLoadingDestinations}\n                  >\n                    <FormControl>\n                      <SelectTrigger className={formState.errors.destinationId ? \"border-red-500\" : \"\"}>\n                        <SelectValue placeholder=\"Select a destination\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {destinations && destinations.length > 0 ? (\n                        destinations.map((destination: Destination) => (\n                          <SelectItem key={destination.id} value={destination.id.toString()}>\n                            {destination.name}, {destination.country}\n                          </SelectItem>\n                        ))\n                      ) : (\n                        <div className=\"px-2 py-4 text-center\">\n                          <p className=\"text-sm text-muted-foreground mb-2\">No destinations—add one</p>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"w-full\"\n                            onClick={(e) => {\n                              e.preventDefault();\n                              // Close the current form and open destination form\n                              onOpenChange(false);\n                              // Notify parent to open destination form\n                              window.dispatchEvent(new CustomEvent('openDestinationForm'));\n                            }}\n                          >\n                            Add Destination\n                          </Button>\n                        </div>\n                      )}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            {/* \n             * Image URL field with real-time validation\n             * Validates URL format as user types (this field is optional)\n             */}\n            <FormField\n              control={form.control}\n              name=\"image\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Image URL (optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"https://example.com/image.jpg\" \n                      {...field} \n                      value={field.value || \"\"}\n                      className={formState.errors.image ? \"border-red-500\" : \"\"}\n                      onChange={(e) => {\n                        field.onChange(e);\n                        // Only trigger validation if there's a value\n                        if (e.target.value) {\n                          form.trigger(\"image\");\n                        }\n                      }}\n                      onBlur={() => {\n                        // Also validate on blur for better UX\n                        if (field.value) {\n                          form.trigger(\"image\");\n                        }\n                      }}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <DialogFooter>\n              {/* \n               * Submit Button with Enhanced Validation-Aware State\n               * \n               * This button implements a UX-optimized disabled state that prevents:\n               * 1. Invalid submissions - When the form has validation errors (formState.isValid is false)\n               * 2. Double-submissions - During form submission (formState.isSubmitting or isSubmitting prop is true)\n               * \n               * @behavior\n               * - Shows \"Add Accommodation\" or \"Save Changes\" when idle\n               * - Shows \"Adding...\" or \"Saving...\" when submitting\n               * - Dynamically updates disabled state based on real-time form validation\n               * - Prevents users from submitting invalid data\n               * - Prevents duplicate API calls by disabling during submission\n               */}\n              <Button \n                type=\"submit\" \n                className=\"bg-primary hover:bg-primary-800\"\n                disabled={isSubmitting || !formState.isValid || formState.isSubmitting}\n              >\n                {isSubmitting || formState.isSubmitting\n                  ? (isEditing ? \"Saving...\" : \"Adding...\") \n                  : (isEditing ? \"Save Changes\" : \"Add Accommodation\")\n                }\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n  }\n);\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/forms/activity-form.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":50,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[1472,1485],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'values' is defined but never used.","line":51,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"values"},"fix":{"range":[1509,1534],"text":""},"desc":"Remove unused variable 'values'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { Activity, Destination } from \"@shared/schema\";\nimport { insertActivitySchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useQuery } from \"@tanstack/react-query\";\n\n/**\n * Extended schema for activity form with additional fields and validations\n */\nexport const activityFormSchema = insertActivitySchema.extend({\n  image: z.string().url(\"Please enter a valid image URL\").optional(),\n});\n\n/**\n * Type definition for activity form values based on the schema\n */\nexport type ActivityFormValues = z.infer<typeof activityFormSchema>;\n\n/**\n * Type definition for activity form submission values\n */\nexport type ActivityApiValues = {\n  name: string;\n  description: string;\n  category: string;\n  destinationId: number;\n  image?: string;\n  id?: number;\n};\n\n/**\n * Props interface for the ActivityForm component\n */\nexport interface ActivityFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSubmit: (values: ActivityApiValues) => void;\n  defaultValues?: Partial<Activity>;\n  isEditing?: boolean;\n}\n\nexport function ActivityForm({\n  open,\n  onOpenChange,\n  onSubmit,\n  defaultValues,\n  isEditing = false,\n}: ActivityFormProps) {\n  /**\n   * Prepares default values for the form with proper type conversion\n   * @returns Properly typed form values \n   */\n  const prepareDefaultValues = (): ActivityFormValues => {\n    if (defaultValues) {\n      return {\n        name: defaultValues.name || \"\",\n        description: defaultValues.description || \"\",\n        category: defaultValues.category || \"\",\n        destinationId: defaultValues.destinationId || 0,\n        // Handle null image values by converting to undefined\n        image: defaultValues.image === null ? undefined : defaultValues.image,\n      };\n    }\n    \n    // Default values for new activity\n    return {\n      name: \"\",\n      description: \"\",\n      category: \"\",\n      destinationId: 0,\n      image: \"\",\n    };\n  };\n\n  /**\n   * Initialize the form with typesafe validation using Zod schema\n   */\n  const form = useForm<ActivityFormValues>({\n    resolver: zodResolver(activityFormSchema),\n    defaultValues: prepareDefaultValues(),\n  });\n\n  // Use explicit typing for the destinations query\n  const { data: destinations, isLoading: isLoadingDestinations } = useQuery<Destination[]>({\n    queryKey: [\"/api/destinations\"],\n  });\n\n  const categories = [\n    { value: \"Sightseeing\", label: \"Sightseeing\" },\n    { value: \"Adventure\", label: \"Adventure\" },\n    { value: \"Culture\", label: \"Culture\" },\n    { value: \"Relaxation\", label: \"Relaxation\" },\n    { value: \"Food\", label: \"Food\" },\n    { value: \"Shopping\", label: \"Shopping\" },\n    { value: \"Nature\", label: \"Nature\" },\n    { value: \"History\", label: \"History\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>{isEditing ? \"Edit Activity\" : \"Add New Activity\"}</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit((values: ActivityFormValues) => {\n            // Convert form values to API values\n            const apiValues: ActivityApiValues = {\n              ...values,\n              // Include id if we're editing\n              ...(isEditing && defaultValues?.id ? { id: defaultValues.id } : {})\n            };\n            onSubmit(apiValues);\n          })} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Activity Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Eiffel Tower Visit\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Visit the iconic Eiffel Tower...\"\n                      className=\"resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a category\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {categories.map((category) => (\n                        <SelectItem key={category.value} value={category.value}>\n                          {category.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            {/* \n             * Destination selection field with real-time validation and empty state handling\n             * \n             * @EmptyState\n             * - When no destinations are available, shows a message \"No destinations—add one\"\n             * - Provides a button to open the destination form modal directly from the dropdown\n             * - Uses a CustomEvent to communicate with parent component to open destination form\n             * - Improves UX by guiding users through the dependency chain (add destination first)\n             */}\n            <FormField\n              control={form.control}\n              name=\"destinationId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Destination</FormLabel>\n                  <Select\n                    onValueChange={(value) => field.onChange(parseInt(value))}\n                    defaultValue={field.value?.toString()}\n                    disabled={isLoadingDestinations}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a destination\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {destinations && destinations.length > 0 ? (\n                        destinations.map((destination: Destination) => (\n                          <SelectItem key={destination.id} value={destination.id.toString()}>\n                            {destination.name}, {destination.country}\n                          </SelectItem>\n                        ))\n                      ) : (\n                        <div className=\"px-2 py-4 text-center\">\n                          <p className=\"text-sm text-muted-foreground mb-2\">No destinations—add one</p>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"w-full\"\n                            onClick={(e) => {\n                              e.preventDefault();\n                              // Close the current form and open destination form\n                              // This would need to be implemented via a callback from parent\n                              onOpenChange(false);\n                              // Notify parent to open destination form\n                              window.dispatchEvent(new CustomEvent('openDestinationForm'));\n                            }}\n                          >\n                            Add Destination\n                          </Button>\n                        </div>\n                      )}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"image\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Image URL (optional)</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"https://example.com/image.jpg\" {...field} value={field.value || \"\"} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <DialogFooter>\n              <Button type=\"submit\" className=\"bg-primary hover:bg-primary-800\">\n                {isEditing ? \"Save Changes\" : \"Add Activity\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/forms/destination-form.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":49,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[1481,1494],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'values' is defined but never used.","line":50,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"values"},"fix":{"range":[1518,1546],"text":""},"desc":"Remove unused variable 'values'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { Destination } from \"@shared/schema\";\nimport { insertDestinationSchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\n/**\n * Extended schema for destination form with additional fields and validations\n */\nexport const destinationFormSchema = insertDestinationSchema.extend({\n  image: z.string().url(\"Please enter a valid image URL\").default(\"\"),\n  status: z.enum([\"visited\", \"planned\", \"wishlist\"]).default(\"wishlist\"),\n});\n\n/**\n * Type definition for destination form values based on the schema\n */\nexport type DestinationFormValues = z.infer<typeof destinationFormSchema>;\n\n/**\n * Type definition for destination form submission values\n */\nexport type DestinationApiValues = {\n  name: string;\n  country: string;\n  region: string;\n  image: string;\n  status: \"visited\" | \"planned\" | \"wishlist\";\n  id?: number;\n};\n\n/**\n * Props interface for the DestinationForm component\n */\nexport interface DestinationFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSubmit: (values: DestinationApiValues) => void;\n  defaultValues?: Partial<Destination>;\n  isEditing?: boolean;\n}\n\nexport function DestinationForm({\n  open,\n  onOpenChange,\n  onSubmit,\n  defaultValues,\n  isEditing = false,\n}: DestinationFormProps) {\n  /**\n   * Prepares default values for the form with proper type conversion\n   * @returns Properly typed form values\n   */\n  const prepareDefaultValues = (): DestinationFormValues => {\n    if (defaultValues) {\n      return {\n        name: defaultValues.name || \"\",\n        country: defaultValues.country || \"\",\n        region: defaultValues.region || \"\",\n        image: defaultValues.image || \"\",\n        // Convert the string status to our enum type\n        status: (defaultValues.status as \"wishlist\" | \"planned\" | \"visited\") || \"wishlist\",\n      };\n    }\n    \n    // Default values for new destination\n    return {\n      name: \"\",\n      country: \"\",\n      region: \"\",\n      image: \"\",\n      status: \"wishlist\",\n    };\n  };\n\n  /**\n   * Initialize the form with typesafe validation using Zod schema\n   */\n  const form = useForm<DestinationFormValues>({\n    resolver: zodResolver(destinationFormSchema),\n    defaultValues: prepareDefaultValues(),\n  });\n\n  const regions = [\n    { value: \"Africa\", label: \"Africa\" },\n    { value: \"Asia\", label: \"Asia\" },\n    { value: \"Europe\", label: \"Europe\" },\n    { value: \"North America\", label: \"North America\" },\n    { value: \"South America\", label: \"South America\" },\n    { value: \"Oceania\", label: \"Oceania\" },\n    { value: \"Antarctica\", label: \"Antarctica\" },\n  ];\n\n  const statuses = [\n    { value: \"wishlist\", label: \"Wishlist\" },\n    { value: \"planned\", label: \"Planned\" },\n    { value: \"visited\", label: \"Visited\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>{isEditing ? \"Edit Destination\" : \"Add New Destination\"}</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit((values: DestinationFormValues) => {\n            // Convert form values to API values\n            const apiValues: DestinationApiValues = {\n              ...values,\n              // Include id if we're editing\n              ...(isEditing && defaultValues?.id ? { id: defaultValues.id } : {})\n            };\n            onSubmit(apiValues);\n          })} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Paris\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"country\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Country</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"France\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"region\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Region</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a region\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {regions.map((region) => (\n                        <SelectItem key={region.value} value={region.value}>\n                          {region.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"image\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Image URL</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"https://example.com/image.jpg\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {statuses.map((status) => (\n                        <SelectItem key={status.value} value={status.value}>\n                          {status.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <DialogFooter>\n              <Button type=\"submit\" className=\"bg-primary hover:bg-primary-800\">\n                {isEditing ? \"Save Changes\" : \"Add Destination\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/forms/trip-form.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Destination' is defined but never used.","line":4,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"Destination"},"fix":{"range":[137,150],"text":""},"desc":"Remove unused variable 'Destination'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useQuery' is defined but never used.","line":23,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"useQuery"},"fix":{"range":[898,947],"text":""},"desc":"Remove unused variable 'useQuery'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":41,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[1355,1368],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'values' is defined but never used.","line":42,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"values"},"fix":{"range":[1392,1413],"text":""},"desc":"Remove unused variable 'values'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { Trip, Destination } from \"@shared/schema\";\nimport { insertTripSchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { format } from \"date-fns\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useQuery } from \"@tanstack/react-query\";\n\n/**\n * Type definition for trip form submission values to be sent to the API\n */\nexport type TripApiValues = {\n  name: string;\n  startDate: string; // Format: 'yyyy-MM-dd'\n  endDate: string;   // Format: 'yyyy-MM-dd'\n  status: \"planned\" | \"completed\" | \"cancelled\";\n  id?: number;\n};\n\n/**\n * Props interface for the TripForm component\n */\nexport interface TripFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSubmit: (values: TripApiValues) => void;\n  defaultValues?: Partial<Trip>;\n  isEditing?: boolean;\n}\n\n/**\n * Extended schema for trip form with additional fields and validations\n * Converts string dates from the API to Date objects for the form\n */\nexport const tripFormSchema = insertTripSchema.extend({\n  // Override the date fields to use z.date() for form handling\n  startDate: z.date({\n    required_error: \"Start date is required\",\n  }),\n  endDate: z.date({\n    required_error: \"End date is required\",\n  }),\n  status: z.enum([\"planned\", \"completed\", \"cancelled\"]).default(\"planned\"),\n});\n\n/**\n * Type definition for trip form values based on the schema\n */\nexport type TripFormValues = z.infer<typeof tripFormSchema>;\n\nexport function TripForm({\n  open,\n  onOpenChange,\n  onSubmit,\n  defaultValues,\n  isEditing = false,\n}: TripFormProps) {\n  /**\n   * Converts form values with Date objects to API values with string dates\n   * @param values Form values from React Hook Form\n   * @returns Formatted values ready for API submission\n   */\n  const handleSubmit = (values: TripFormValues): void => {\n    // Convert Date objects to strings in the format expected by the API\n    const formattedValues: TripApiValues = {\n      ...values,\n      startDate: format(values.startDate, 'yyyy-MM-dd'),\n      endDate: format(values.endDate, 'yyyy-MM-dd'),\n      // Include id if we're editing\n      ...(isEditing && defaultValues?.id ? { id: defaultValues.id } : {})\n    };\n    \n    onSubmit(formattedValues);\n  };\n\n  /**\n   * Prepares default values for the form, converting string dates to Date objects\n   * @returns Form values with proper Date objects\n   */\n  const prepareDefaultValues = (): TripFormValues => {\n    if (defaultValues) {\n      return {\n        name: defaultValues.name || \"\",\n        // Convert string dates to Date objects\n        startDate: defaultValues.startDate ? new Date(defaultValues.startDate) : new Date(),\n        endDate: defaultValues.endDate ? new Date(defaultValues.endDate) : new Date(new Date().setDate(new Date().getDate() + 7)),\n        status: (defaultValues.status as \"planned\" | \"completed\" | \"cancelled\") || \"planned\",\n      };\n    }\n    \n    // Default values for new trip\n    return {\n      name: \"\",\n      startDate: new Date(),\n      endDate: new Date(new Date().setDate(new Date().getDate() + 7)),\n      status: \"planned\",\n    };\n  };\n\n  /**\n   * Initialize the form with typesafe validation using Zod schema\n   */\n  const form = useForm<TripFormValues>({\n    resolver: zodResolver(tripFormSchema),\n    defaultValues: prepareDefaultValues(),\n  });\n  \n  const statuses = [\n    { value: \"planned\", label: \"Planned\" },\n    { value: \"completed\", label: \"Completed\" },\n    { value: \"cancelled\", label: \"Cancelled\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>{isEditing ? \"Edit Trip\" : \"Add New Trip\"}</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Trip Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Summer Vacation\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"startDate\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Start Date</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant={\"outline\"}\n                            className={cn(\n                              \"pl-3 text-left font-normal\",\n                              !field.value && \"text-muted-foreground\"\n                            )}\n                          >\n                            {field.value ? (\n                              format(field.value, \"PPP\")\n                            ) : (\n                              <span>Pick a date</span>\n                            )}\n                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={field.value}\n                          onSelect={field.onChange}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"endDate\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>End Date</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant={\"outline\"}\n                            className={cn(\n                              \"pl-3 text-left font-normal\",\n                              !field.value && \"text-muted-foreground\"\n                            )}\n                          >\n                            {field.value ? (\n                              format(field.value, \"PPP\")\n                            ) : (\n                              <span>Pick a date</span>\n                            )}\n                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={field.value}\n                          onSelect={field.onChange}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {statuses.map((status) => (\n                        <SelectItem key={status.value} value={status.value}>\n                          {status.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <DialogFooter>\n              <Button type=\"submit\" className=\"bg-primary hover:bg-primary-800\">\n                {isEditing ? \"Save Changes\" : \"Add Trip\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/trips/trip-card.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'StatusBadge' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"StatusBadge"},"fix":{"range":[107,166],"text":""},"desc":"Remove unused variable 'StatusBadge'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":6,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"Clock"},"fix":{"range":[258,265],"text":""},"desc":"Remove unused variable 'Clock'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":6,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"MapPin"},"fix":{"range":[265,273],"text":""},"desc":"Remove unused variable 'MapPin'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":20,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[911,921],"text":""},"desc":"Remove unused variable 'id'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { format } from \"date-fns\";\nimport { Trip } from \"@shared/schema\";\nimport { Calendar, Clock, MapPin } from \"lucide-react\";\nimport { Building, Smile } from \"lucide-react\";\n\n/**\n * Interface for TripCard component props\n * Defines the expected shape of data for a trip card display\n */\ninterface TripCardProps {\n  trip: Trip;                      // Trip data from the API\n  image: string;                   // URL for the trip's primary image\n  destinations: string[];          // Array of destination names\n  activitiesCount: number;         // Count of activities for this trip\n  accommodationsCount: number;     // Count of accommodations for this trip\n  daysToTrip?: number;             // Optional: days until trip starts\n  onView: (id: number) => void;    // Callback for viewing trip details\n}\n\nexport function TripCard({\n  trip,\n  image,\n  destinations,\n  activitiesCount,\n  accommodationsCount,\n  daysToTrip,\n  onView,\n}: TripCardProps) {\n  /**\n   * Format trip dates for display using date-fns\n   * Converting string dates from API to JavaScript Date objects\n   */\n  const formattedStartDate: string = format(new Date(trip.startDate), \"MMM d, yyyy\");\n  const formattedEndDate: string = format(new Date(trip.endDate), \"MMM d, yyyy\");\n\n  /**\n   * Calculate trip duration in days\n   * Using Date objects to ensure accurate calculation\n   */\n  const startDate: Date = new Date(trip.startDate);\n  const endDate: Date = new Date(trip.endDate);\n  const tripDuration: number = Math.ceil(\n    (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)\n  );\n\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"relative h-48 overflow-hidden\">\n        <img\n          src={image}\n          alt={trip.name}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex flex-col justify-end p-6\">\n          {daysToTrip !== undefined && (\n            <span className=\"text-white text-xs font-medium bg-primary rounded-full px-2 py-1 inline-block mb-2 w-fit\">\n              {daysToTrip === 0\n                ? \"Today\"\n                : daysToTrip === 1\n                  ? \"Tomorrow\"\n                  : `In ${daysToTrip} days`}\n            </span>\n          )}\n          <h3 className=\"text-white text-xl font-bold\">{trip.name}</h3>\n          <p className=\"text-white/80 text-sm\">{destinations.join(\" • \")}</p>\n        </div>\n      </div>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center mb-4\">\n          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n            <Calendar className=\"h-4 w-4 text-gray-500\" />\n          </div>\n          <div>\n            <p className=\"text-sm text-gray-500\">\n              {formattedStartDate} - {formattedEndDate}\n            </p>\n            <p className=\"text-sm font-medium text-gray-text\">\n              {tripDuration} days\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center mb-4\">\n          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n            <Smile className=\"h-4 w-4 text-gray-500\" />\n          </div>\n          <div>\n            <p className=\"text-sm text-gray-500\">Activities</p>\n            <p className=\"text-sm font-medium text-gray-text\">\n              {activitiesCount} planned\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n            <Building className=\"h-4 w-4 text-gray-500\" />\n          </div>\n          <div>\n            <p className=\"text-sm text-gray-500\">Accommodations</p>\n            <p className=\"text-sm font-medium text-gray-text\">\n              {accommodationsCount} booked\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mt-6\">\n          <Button\n            className=\"w-full bg-primary hover:bg-primary-800\"\n            onClick={() => onView(trip.id)}\n          >\n            View Trip Details\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/accommodation-card.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Building' is defined but never used.","line":3,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"Building"},"fix":{"range":[150,160],"text":""},"desc":"Remove unused variable 'Building'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'accommodation' is defined but never used.","line":10,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"accommodation"},"fix":{"range":[481,509],"text":""},"desc":"Remove unused variable 'accommodation'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":11,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[533,543],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'accommodation' is defined but never used.","line":12,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"accommodation"},"fix":{"range":[565,593],"text":""},"desc":"Remove unused variable 'accommodation'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MoreHorizontal, MapPin, Building } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Accommodation, Destination } from \"@shared/schema\";\n\nexport interface AccommodationCardProps {\n  accommodation: Accommodation;\n  destination: Destination;\n  onEdit: (accommodation: Accommodation) => void;\n  onDelete: (id: number) => void;\n  onView: (accommodation: Accommodation) => void;\n}\n\nexport function AccommodationCard({\n  accommodation,\n  destination,\n  onEdit,\n  onDelete,\n  onView,\n}: AccommodationCardProps) {\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"relative h-44\">\n        <img\n          src={accommodation.image || \"https://images.unsplash.com/photo-1551882547-ff40c63fe5fa\"}\n          alt={accommodation.name}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute top-3 right-3\">\n          <span className=\"text-xs font-medium bg-amber-100 text-amber-800 rounded-full px-2 py-1\">\n            {accommodation.type}\n          </span>\n        </div>\n      </div>\n      <CardContent className=\"p-4\">\n        <h3 className=\"text-lg font-semibold text-gray-text mb-1\">{accommodation.name}</h3>\n        <div className=\"flex items-center text-xs text-gray-500 mb-2\">\n          <MapPin className=\"h-3 w-3 mr-1\" />\n          {destination.name}, {destination.country}\n        </div>\n      </CardContent>\n      <CardFooter className=\"p-4 pt-0 flex justify-between\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"text-primary border-primary hover:bg-primary/10\"\n          onClick={() => onView(accommodation)}\n        >\n          View Details\n        </Button>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\">\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={() => onEdit(accommodation)}>\n              Edit\n            </DropdownMenuItem>\n            <DropdownMenuItem \n              className=\"text-destructive focus:text-destructive\"\n              onClick={() => onDelete(accommodation.id)}\n            >\n              Delete\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </CardFooter>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/activity-card.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'activity' is defined but never used.","line":10,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"activity"},"fix":{"range":[451,469],"text":""},"desc":"Remove unused variable 'activity'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":11,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[493,503],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'activity' is defined but never used.","line":12,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"activity"},"fix":{"range":[525,543],"text":""},"desc":"Remove unused variable 'activity'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MoreHorizontal, MapPin } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Activity, Destination } from \"@shared/schema\";\n\nexport interface ActivityCardProps {\n  activity: Activity;\n  destination: Destination;\n  onEdit: (activity: Activity) => void;\n  onDelete: (id: number) => void;\n  onView: (activity: Activity) => void;\n}\n\nexport function ActivityCard({\n  activity,\n  destination,\n  onEdit,\n  onDelete,\n  onView,\n}: ActivityCardProps) {\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"relative h-44\">\n        <img\n          src={activity.image || \"https://images.unsplash.com/photo-1454942901704-3c44c11b2ad1\"}\n          alt={activity.name}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute top-3 right-3\">\n          <span className=\"text-xs font-medium bg-primary-800 text-white rounded-full px-2 py-1\">\n            {activity.category}\n          </span>\n        </div>\n      </div>\n      <CardContent className=\"p-4\">\n        <h3 className=\"text-lg font-semibold text-gray-text mb-1\">{activity.name}</h3>\n        <div className=\"flex items-center text-xs text-gray-500 mb-2\">\n          <MapPin className=\"h-3 w-3 mr-1\" />\n          {destination.name}, {destination.country}\n        </div>\n        <p className=\"text-sm text-gray-600 line-clamp-2\">{activity.description}</p>\n      </CardContent>\n      <CardFooter className=\"p-4 pt-0 flex justify-between\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"text-primary border-primary hover:bg-primary/10\"\n          onClick={() => onView(activity)}\n        >\n          View Details\n        </Button>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\">\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={() => onEdit(activity)}>\n              Edit\n            </DropdownMenuItem>\n            <DropdownMenuItem \n              className=\"text-destructive focus:text-destructive\"\n              onClick={() => onDelete(activity.id)}\n            >\n              Delete\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </CardFooter>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/calendar.tsx","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'className' is missing in props validation","line":55,"column":22,"nodeType":"Property","messageId":"missingPropType","endLine":55,"endColumn":31},{"ruleId":"react/prop-types","severity":2,"message":"'className' is missing in props validation","line":58,"column":23,"nodeType":"Property","messageId":"missingPropType","endLine":58,"endColumn":32}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/carousel.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":19,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"api"},"fix":{"range":[586,602],"text":""},"desc":"Remove unused variable 'api'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/chart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'k' is defined but never used.","line":12,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":5,"suggestions":[{"messageId":"removeVar","data":{"varName":"k"},"fix":{"range":[251,252],"text":""},"desc":"Remove unused variable 'k'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/command.tsx","messages":[{"ruleId":"react/no-unknown-property","severity":2,"message":"Unknown property 'cmdk-input-wrapper' found","line":40,"column":52,"nodeType":"JSXAttribute","messageId":"unknownProp","endLine":40,"endColumn":73}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/destination-card.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":4,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"MapPin"},"fix":{"range":[177,185],"text":""},"desc":"Remove unused variable 'MapPin'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'destination' is defined but never used.","line":12,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"destination"},"fix":{"range":[529,553],"text":""},"desc":"Remove unused variable 'destination'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":13,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[577,587],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'destination' is defined but never used.","line":14,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"destination"},"fix":{"range":[609,633],"text":""},"desc":"Remove unused variable 'destination'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { MoreHorizontal, MapPin, Smile, Building } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Destination } from \"@shared/schema\";\n\nexport interface DestinationCardProps {\n  destination: Destination;\n  activityCount: number;\n  accommodationCount: number;\n  onEdit: (destination: Destination) => void;\n  onDelete: (id: number) => void;\n  onView: (destination: Destination) => void;\n}\n\nexport function DestinationCard({\n  destination,\n  activityCount,\n  accommodationCount,\n  onEdit,\n  onDelete,\n  onView,\n}: DestinationCardProps) {\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"relative h-48\">\n        <img\n          src={destination.image}\n          alt={`${destination.name}, ${destination.country}`}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute top-3 right-3\">\n          <StatusBadge status={destination.status as \"visited\" | \"planned\" | \"wishlist\"} />\n        </div>\n      </div>\n      <div className=\"p-5\">\n        <h3 className=\"text-xl font-semibold text-gray-text mb-1\">{destination.name}</h3>\n        <p className=\"text-gray-500 text-sm mb-3\">\n          {destination.country}, {destination.region}\n        </p>\n        <div className=\"flex items-center justify-between mb-4\">\n          <span className=\"text-sm text-gray-500 flex items-center\">\n            <Smile className=\"h-4 w-4 mr-1 text-primary\" />\n            {activityCount} Activities\n          </span>\n          <span className=\"text-sm text-gray-500 flex items-center\">\n            <Building className=\"h-4 w-4 mr-1 text-primary\" />\n            {accommodationCount} Accommodations\n          </span>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button \n            className=\"flex-1 bg-primary hover:bg-primary-800\" \n            onClick={() => onView(destination)}\n          >\n            View Details\n          </Button>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"p-2\">\n                <MoreHorizontal className=\"h-5 w-5\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={() => onEdit(destination)}>\n                Edit\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                className=\"text-destructive focus:text-destructive\"\n                onClick={() => onDelete(destination.id)}\n              >\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/page-header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/resizable.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":11,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":27,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/search-filter.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":14,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[359,372],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":19,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[472,485],"text":""},"desc":"Remove unused variable 'value'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search } from \"lucide-react\";\n\nexport interface FilterOption {\n  value: string;\n  label: string;\n}\n\nexport interface Filter {\n  name: string;\n  options: FilterOption[];\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport interface SearchFilterProps {\n  searchPlaceholder?: string;\n  onSearchChange: (value: string) => void;\n  filters?: Filter[];\n}\n\nexport function SearchFilter({\n  searchPlaceholder = \"Search...\",\n  onSearchChange,\n  filters = [],\n}: SearchFilterProps) {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-4 mb-6\">\n      <div className=\"flex flex-col md:flex-row md:items-center space-y-3 md:space-y-0 md:space-x-4\">\n        <div className=\"flex-1 relative\">\n          <Input\n            placeholder={searchPlaceholder}\n            onChange={(e) => onSearchChange(e.target.value)}\n            className=\"w-full pr-10\"\n          />\n          <div className=\"absolute right-3 top-2.5\">\n            <Search className=\"h-5 w-5 text-gray-400\" />\n          </div>\n        </div>\n        {filters.length > 0 && (\n          <div className=\"flex flex-wrap gap-4\">\n            {filters.map((filter) => (\n              <Select\n                key={filter.name}\n                value={filter.value}\n                onValueChange={filter.onChange}\n              >\n                <SelectTrigger className=\"w-44\">\n                  <SelectValue placeholder={`All ${filter.name}`} />\n                </SelectTrigger>\n                <SelectContent>\n                  {filter.options.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/sidebar.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"isMobile"},"fix":{"range":[343,351],"text":""},"desc":"Remove unused variable 'isMobile'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Globe, Building, Plus, MapPin, Smile, Home, User, Settings } from \"lucide-react\";\n\nexport interface SidebarProps {\n  className?: string;\n}\n\nexport function Sidebar({ className }: SidebarProps = {}) {\n  const [location] = useLocation();\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    const checkIfMobile = () => {\n      setIsMobile(window.innerWidth <= 640);\n    };\n\n    checkIfMobile();\n    window.addEventListener(\"resize\", checkIfMobile);\n\n    return () => {\n      window.removeEventListener(\"resize\", checkIfMobile);\n    };\n  }, []);\n\n  const links = [\n    { path: \"/\", label: \"Dashboard\", icon: Home },\n    { path: \"/trips\", label: \"Trips\", icon: Building },\n    { path: \"/trip-builder\", label: \"Trip Builder\", icon: Plus },\n    { path: \"/destinations\", label: \"Destinations\", icon: MapPin },\n    { path: \"/activities\", label: \"Activities\", icon: Smile },\n    { path: \"/accommodations\", label: \"Accommodations\", icon: Building },\n    { path: \"/profile\", label: \"Profile\", icon: User },\n    { path: \"/settings\", label: \"Settings\", icon: Settings },\n  ];\n\n  return (\n    <div className={`sidebar bg-white w-64 h-full shadow-lg fixed left-0 top-0 z-10 ${className || ''}`}>\n      <div className=\"sidebar-container flex flex-col h-full\">\n        <div className=\"sidebar-logo flex items-center justify-center h-16 border-b border-gray-border\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-primary\">\n              <Globe className=\"h-8 w-8\" />\n            </span>\n            <span className=\"sidebar-text text-gray-text font-semibold text-lg\">TravelPlanner</span>\n          </div>\n        </div>\n        <div className=\"flex-1 overflow-y-auto py-4\">\n          <nav className=\"px-4 space-y-1\">\n            {links.slice(0, 6).map((link) => (\n              <Link key={link.path} href={link.path}>\n                <div\n                  className={`sidebar-link flex items-center px-4 py-3 text-sm rounded-md cursor-pointer ${\n                    location === link.path\n                      ? \"active\"\n                      : \"text-gray-text hover:bg-gray-bg\"\n                  }`}\n                >\n                  <link.icon className=\"h-5 w-5 mr-3\" />\n                  <span className=\"sidebar-text\">{link.label}</span>\n                </div>\n              </Link>\n            ))}\n          </nav>\n        </div>\n        <div className=\"border-t border-gray-border pt-4 pb-3\">\n          <div className=\"px-4\">\n            {links.slice(6).map((link) => (\n              <Link key={link.path} href={link.path}>\n                <div\n                  className={`sidebar-link flex items-center px-4 py-3 text-sm rounded-md cursor-pointer ${\n                    location === link.path\n                      ? \"active\"\n                      : \"text-gray-text hover:bg-gray-bg\"\n                  }`}\n                >\n                  <link.icon className=\"h-5 w-5 mr-3\" />\n                  <span className=\"sidebar-text\">{link.label}</span>\n                </div>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/skeleton.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":6,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/stat-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/status-badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/table.tsx","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'className' is missing in props validation","line":72,"column":6,"nodeType":"Property","messageId":"missingPropType","endLine":72,"endColumn":15},{"ruleId":"react/prop-types","severity":2,"message":"'className' is missing in props validation","line":87,"column":6,"nodeType":"Property","messageId":"missingPropType","endLine":87,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/components/ui/trip-card.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'StatusBadge' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"StatusBadge"},"fix":{"range":[107,166],"text":""},"desc":"Remove unused variable 'StatusBadge'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":6,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"Clock"},"fix":{"range":[258,265],"text":""},"desc":"Remove unused variable 'Clock'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":6,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"MapPin"},"fix":{"range":[265,273],"text":""},"desc":"Remove unused variable 'MapPin'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":16,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[528,538],"text":""},"desc":"Remove unused variable 'id'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { format } from \"date-fns\";\nimport { Trip } from \"@shared/schema\";\nimport { Calendar, Clock, MapPin } from \"lucide-react\";\nimport { Building, Smile } from \"lucide-react\";\n\nexport interface TripCardProps {\n  trip: Trip;\n  image: string;\n  destinations: string[];\n  activitiesCount: number;\n  accommodationsCount: number;\n  daysToTrip?: number;\n  onView: (id: number) => void;\n}\n\nexport function TripCard({\n  trip,\n  image,\n  destinations,\n  activitiesCount,\n  accommodationsCount,\n  daysToTrip,\n  onView,\n}: TripCardProps) {\n  const formattedStartDate = format(new Date(trip.startDate), \"MMM d, yyyy\");\n  const formattedEndDate = format(new Date(trip.endDate), \"MMM d, yyyy\");\n\n  // Calculate trip duration in days\n  const startDate = new Date(trip.startDate);\n  const endDate = new Date(trip.endDate);\n  const tripDuration = Math.ceil(\n    (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24),\n  );\n\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"relative h-48 overflow-hidden\">\n        <img\n          src={image}\n          alt={trip.name}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex flex-col justify-end p-6\">\n          {daysToTrip !== undefined && (\n            <span className=\"text-white text-xs font-medium bg-primary rounded-full px-2 py-1 inline-block mb-2 w-fit\">\n              {daysToTrip === 0\n                ? \"Today\"\n                : daysToTrip === 1\n                  ? \"Tomorrow\"\n                  : `In ${daysToTrip} days`}\n            </span>\n          )}\n          <h3 className=\"text-white text-xl font-bold\">{trip.name}</h3>\n          <p className=\"text-white/80 text-sm\">{destinations.join(\" • \")}</p>\n        </div>\n      </div>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center mb-4\">\n          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n            <Calendar className=\"h-4 w-4 text-gray-500\" />\n          </div>\n          <div>\n            <p className=\"text-sm text-gray-500\">\n              {formattedStartDate} - {formattedEndDate}\n            </p>\n            <p className=\"text-sm font-medium text-gray-text\">\n              {tripDuration} days\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center mb-4\">\n          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n            <Smile className=\"h-4 w-4 text-gray-500\" />\n          </div>\n          <div>\n            <p className=\"text-sm text-gray-500\">Activities</p>\n            <p className=\"text-sm font-medium text-gray-text\">\n              {activitiesCount} planned\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n            <Building className=\"h-4 w-4 text-gray-500\" />\n          </div>\n          <div>\n            <p className=\"text-sm text-gray-500\">Accommodations</p>\n            <p className=\"text-sm font-medium text-gray-text\">\n              {accommodationsCount} booked\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mt-6\">\n          <Button\n            className=\"w-full bg-primary hover:bg-primary-800\"\n            onClick={() => onView(trip.id)}\n          >\n            View Trip Details\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/hooks/use-auth.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InsertUser' is defined but never used.","line":3,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"InsertUser"},"fix":{"range":[157,169],"text":""},"desc":"Remove unused variable 'InsertUser'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":55,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, ReactNode, useContext } from \"react\";\nimport { useQuery, useMutation, UseMutationResult } from \"@tanstack/react-query\";\nimport { User, InsertUser } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: User | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<Omit<User, \"password\">, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<Omit<User, \"password\">, Error, RegisterData>;\n};\n\ntype LoginData = {\n  username: string;\n  password: string;\n};\n\ntype RegisterData = {\n  username: string;\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<User | null, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/user\", {\n          credentials: \"include\",\n        });\n        \n        if (response.status === 401) {\n          return null;\n        }\n        \n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user\");\n        }\n        \n        return await response.json();\n      } catch (error) {\n        return null;\n      }\n    },\n  });\n\n  const loginMutation = useMutation<Omit<User, \"password\">, Error, LoginData>({\n    mutationFn: async (credentials: LoginData) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", credentials);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Login failed\");\n      }\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation<Omit<User, \"password\">, Error, RegisterData>({\n    mutationFn: async (userData: RegisterData) => {\n      const response = await apiRequest(\"POST\", \"/api/register\", userData);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Registration failed\");\n      }\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      toast({\n        title: \"Registration successful\",\n        description: \"Your account has been created!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation<void, Error, void>({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/logout\");\n      if (!response.ok) {\n        throw new Error(\"Logout failed\");\n      }\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user || null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/hooks/use-toast.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'state' is defined but never used.","line":129,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":129,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"state"},"fix":{"range":[2700,2712],"text":""},"desc":"Remove unused variable 'state'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/lib/protected-route.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":10,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuth } from \"@/hooks\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  return (\n    <Route path={path}>\n      {isLoading ? (\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      ) : user ? (\n        <Component />\n      ) : (\n        <Redirect to=\"/auth\" />\n      )}\n    </Route>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/lib/queryClient.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TResponseData' is defined but never used.","line":10,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":71,"suggestions":[{"messageId":"removeVar","data":{"varName":"TResponseData"},"fix":{"range":[321,336],"text":""},"desc":"Remove unused variable 'TResponseData'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response): Promise<void> {\n  if (!res.ok) {\n    const text: string = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest<TRequestData = unknown, TResponseData = unknown>(\n  method: string,\n  url: string,\n  data?: TRequestData,\n): Promise<Response> {\n  const res: Response = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\nexport async function apiRequestWithJson<TRequestData = unknown, TResponseData = unknown>(\n  method: string,\n  url: string,\n  data?: TRequestData,\n): Promise<TResponseData> {\n  const res: Response = await apiRequest<TRequestData, TResponseData>(method, url, data);\n  return await res.json() as TResponseData;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn = <TData>(options: {\n  on401: UnauthorizedBehavior;\n}): QueryFunction<TData> => {\n  return async ({ queryKey }): Promise<TData> => {\n    const res: Response = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (options.on401 === \"returnNull\" && res.status === 401) {\n      return null as unknown as TData; // Null cast as TData to satisfy the QueryFunction type\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json() as TData;\n  };\n};\n\nexport const queryClient: QueryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn<unknown>({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/pages/accommodations.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'AccommodationFormProps' is defined but never used.","line":8,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccommodationFormProps"},"fix":{"range":[469,493],"text":""},"desc":"Remove unused variable 'AccommodationFormProps'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'apiRequest' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"apiRequest"},"fix":{"range":[668,679],"text":""},"desc":"Remove unused variable 'apiRequest'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":36,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[1962,1974],"text":""},"desc":"Remove unused variable 'error'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from \"react\";\nimport { PageHeader } from \"@/components/common/page-header\";\nimport { SearchFilter } from \"@/components/ui/search-filter\";\nimport { AccommodationCard } from \"@/components/accommodations/accommodation-card\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus } from \"lucide-react\";\nimport { Accommodation, Destination, InsertAccommodation } from \"@shared/schema\";\nimport { AccommodationForm, AccommodationFormProps } from \"@/components/forms/accommodation-form\";\nimport { DestinationForm } from \"@/components/forms/destination-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, apiRequestWithJson } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface FilterOption {\n  value: string;\n  label: string;\n}\n\nexport default function Accommodations() {\n  const { toast } = useToast();\n  const [search, setSearch] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"\");\n  const [destinationFilter, setDestinationFilter] = useState(\"\");\n  const [formOpen, setFormOpen] = useState(false);\n  const [editingAccommodation, setEditingAccommodation] = useState<Accommodation | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [accommodationToDelete, setAccommodationToDelete] = useState<number | null>(null);\n  const [accommodationDetailOpen, setAccommodationDetailOpen] = useState(false);\n  const [selectedAccommodation, setSelectedAccommodation] = useState<Accommodation | null>(null);\n  const [destinationFormOpen, setDestinationFormOpen] = useState(false);\n  \n  // Reference to the accommodation form for handling server validation errors\n  const accommodationFormRef = useRef<{\n    parseServerValidationErrors: (error: Error) => boolean;\n  }>(null);\n  \n  // Listen for openDestinationForm events to handle destinations modal from dropdown empty state\n  useEffect(() => {\n    /**\n     * Event handler for the openDestinationForm custom event\n     * This allows the destination dropdown empty state to trigger opening the destination form\n     */\n    const handleOpenDestinationForm = () => {\n      setDestinationFormOpen(true);\n    };\n    \n    // Add event listener when component mounts\n    window.addEventListener('openDestinationForm', handleOpenDestinationForm);\n    \n    // Remove event listener when component unmounts\n    return () => {\n      window.removeEventListener('openDestinationForm', handleOpenDestinationForm);\n    };\n  }, []);\n\n  // Fetch accommodations\n  const { data: accommodations, isLoading } = useQuery<Accommodation[]>({\n    queryKey: [\"/api/accommodations\"],\n  });\n\n  // Fetch destinations\n  const { data: destinations } = useQuery<Destination[]>({\n    queryKey: [\"/api/destinations\"],\n  });\n\n  /**\n   * Create accommodation mutation with enhanced error handling\n   * \n   * @description This mutation handles the API request for creating new accommodations\n   * and provides feedback to the user through toast notifications with specific error messages.\n   * \n   * @behavior\n   * - Tracks loading state with isPending to disable UI elements during submission\n   * - Shows success toast on successful creation\n   * - Shows detailed error toast on failed creation, extracting error message from the response\n   * - Automatically refreshes accommodation data on success\n   * \n   * @error-handling\n   * - Parses API error messages from the Error object thrown by apiRequestWithJson\n   * - Extracts status code and message details when available\n   * - Falls back to generic message when specific error details cannot be extracted\n   * - Formats validation errors in a user-friendly way\n   * \n   * @maintainer-notes\n   * - When server returns validation errors, the format will be extracted from error.message\n   * - To maintain consistent error handling across forms:\n   *   1. Always use this same error extraction pattern in onError callbacks\n   *   2. Ensure backend returns error messages in a consistent format\n   *   3. Consider centralizing this error handling logic if used in multiple forms\n   */\n  const createAccommodation = useMutation({\n    mutationFn: (newAccommodation: InsertAccommodation) => \n      apiRequestWithJson<InsertAccommodation, Accommodation>(\"POST\", \"/api/accommodations\", newAccommodation),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accommodations\"] });\n      toast({\n        title: \"Success\",\n        description: \"Accommodation created successfully\",\n      });\n      setFormOpen(false);\n    },\n    onError: (error: Error) => {\n      // First, try to parse and map field validation errors to the form fields\n      if (accommodationFormRef.current?.parseServerValidationErrors(error)) {\n        // If validation errors were successfully mapped to form fields, \n        // just show a generic error toast without field details\n        toast({\n          title: \"Validation Error\",\n          description: \"Please correct the highlighted fields\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // If no field validation errors were mapped, fall back to generic error handling\n      let errorMessage = \"Failed to create accommodation\";\n      \n      // The apiRequestWithJson function throws errors in format: \"Status: Message\"\n      if (error.message) {\n        // Check if it's a structured error with status code\n        const errorMatch = error.message.match(/^(\\d+): (.+)$/);\n        if (errorMatch) {\n          const [, statusCode, message] = errorMatch;\n          \n          // Format based on status code\n          if (statusCode === \"400\") {\n            errorMessage = `Validation error: ${message}`;\n          } else if (statusCode === \"401\" || statusCode === \"403\") {\n            errorMessage = `Authentication error: ${message}`;\n          } else if (statusCode === \"404\") {\n            errorMessage = `Not found: ${message}`;\n          } else if (statusCode === \"500\") {\n            errorMessage = `Server error: ${message}`;\n          } else {\n            // For other status codes, just use the message\n            errorMessage = message;\n          }\n        } else {\n          // If no status pattern found, use the raw error message\n          errorMessage = error.message;\n        }\n      }\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  /**\n   * Update accommodation mutation with enhanced error handling\n   * \n   * @description This mutation handles the API request for updating existing accommodations\n   * and provides feedback to the user through toast notifications with specific error messages.\n   * \n   * @behavior\n   * - Tracks loading state with isPending to disable UI elements during submission\n   * - Shows success toast on successful update\n   * - Shows detailed error toast on failed update, extracting error message from the response\n   * - Automatically refreshes accommodation data on success\n   * \n   * @error-handling\n   * - Parses API error messages from the Error object thrown by apiRequestWithJson\n   * - Extracts status code and message details when available\n   * - Falls back to generic message when specific error details cannot be extracted\n   * - Formats validation errors in a user-friendly way\n   * \n   * @maintainer-notes\n   * - When server returns validation errors, the format will be extracted from error.message\n   * - To maintain consistent error handling across forms:\n   *   1. Always use this same error extraction pattern in onError callbacks\n   *   2. Ensure backend returns error messages in a consistent format\n   *   3. Consider centralizing this error handling logic if used in multiple forms\n   */\n  interface UpdateAccommodationParams {\n    id: number;\n    data: Partial<InsertAccommodation>;\n  }\n  \n  const updateAccommodation = useMutation({\n    mutationFn: ({ id, data }: UpdateAccommodationParams) => \n      apiRequestWithJson<Partial<InsertAccommodation>, Accommodation>(\"PUT\", `/api/accommodations/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accommodations\"] });\n      toast({\n        title: \"Success\",\n        description: \"Accommodation updated successfully\",\n      });\n      setEditingAccommodation(null);\n    },\n    onError: (error: Error) => {\n      // First, try to parse and map field validation errors to the form fields\n      if (accommodationFormRef.current?.parseServerValidationErrors(error)) {\n        // If validation errors were successfully mapped to form fields, \n        // just show a generic error toast without field details\n        toast({\n          title: \"Validation Error\",\n          description: \"Please correct the highlighted fields\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // If no field validation errors were mapped, fall back to generic error handling\n      let errorMessage = \"Failed to update accommodation\";\n      \n      // The apiRequestWithJson function throws errors in format: \"Status: Message\"\n      if (error.message) {\n        // Check if it's a structured error with status code\n        const errorMatch = error.message.match(/^(\\d+): (.+)$/);\n        if (errorMatch) {\n          const [, statusCode, message] = errorMatch;\n          \n          // Format based on status code\n          if (statusCode === \"400\") {\n            errorMessage = `Validation error: ${message}`;\n          } else if (statusCode === \"401\" || statusCode === \"403\") {\n            errorMessage = `Authentication error: ${message}`;\n          } else if (statusCode === \"404\") {\n            errorMessage = `Not found: ${message}`;\n          } else if (statusCode === \"500\") {\n            errorMessage = `Server error: ${message}`;\n          } else {\n            // For other status codes, just use the message\n            errorMessage = message;\n          }\n        } else {\n          // If no status pattern found, use the raw error message\n          errorMessage = error.message;\n        }\n      }\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  /**\n   * Delete accommodation mutation with enhanced error handling\n   * \n   * @description This mutation handles the API request for deleting accommodations\n   * and provides feedback to the user through toast notifications with specific error messages.\n   * \n   * @behavior\n   * - Tracks loading state with isPending to disable UI elements during submission\n   * - Shows success toast on successful deletion\n   * - Shows detailed error toast on failed deletion, extracting error message from the response\n   * - Automatically refreshes accommodation data on success\n   * - Closes the delete confirmation dialog on success\n   * \n   * @error-handling\n   * - Parses API error messages from the Error object thrown by apiRequestWithJson\n   * - Extracts status code and message details when available\n   * - Falls back to generic message when specific error details cannot be extracted\n   */\n  const deleteAccommodation = useMutation({\n    mutationFn: (id: number) => \n      apiRequestWithJson<null, void>(\"DELETE\", `/api/accommodations/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accommodations\"] });\n      toast({\n        title: \"Success\",\n        description: \"Accommodation deleted successfully\",\n      });\n      setDeleteDialogOpen(false);\n      setAccommodationToDelete(null);\n    },\n    onError: (error: Error) => {\n      // Extract detailed error message from the error object\n      let errorMessage = \"Failed to delete accommodation\";\n      \n      // The apiRequestWithJson function throws errors in format: \"Status: Message\"\n      if (error.message) {\n        // Check if it's a structured error with status code\n        const errorMatch = error.message.match(/^(\\d+): (.+)$/);\n        if (errorMatch) {\n          const [, statusCode, message] = errorMatch;\n          \n          // Format based on status code\n          if (statusCode === \"400\") {\n            errorMessage = `Validation error: ${message}`;\n          } else if (statusCode === \"401\" || statusCode === \"403\") {\n            errorMessage = `Authentication error: ${message}`;\n          } else if (statusCode === \"404\") {\n            errorMessage = `Not found: ${message}`;\n          } else if (statusCode === \"409\") {\n            errorMessage = `Conflict: ${message}`; // Often used for dependency conflicts\n          } else if (statusCode === \"500\") {\n            errorMessage = `Server error: ${message}`;\n          } else {\n            // For other status codes, just use the message\n            errorMessage = message;\n          }\n        } else {\n          // If no status pattern found, use the raw error message\n          errorMessage = error.message;\n        }\n      }\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateOrUpdateAccommodation = (values: InsertAccommodation): void => {\n    if (editingAccommodation) {\n      updateAccommodation.mutate({ id: editingAccommodation.id, data: values });\n    } else {\n      createAccommodation.mutate(values);\n    }\n  };\n\n  const handleEdit = (accommodation: Accommodation): void => {\n    setEditingAccommodation(accommodation);\n    setFormOpen(true);\n  };\n\n  const handleDelete = (id: number): void => {\n    setAccommodationToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = (): void => {\n    if (accommodationToDelete !== null) {\n      deleteAccommodation.mutate(accommodationToDelete);\n    }\n  };\n\n  const handleFormOpenChange = (open: boolean): void => {\n    setFormOpen(open);\n    if (!open) {\n      setEditingAccommodation(null);\n    }\n  };\n\n  const handleViewAccommodation = (accommodation: Accommodation): void => {\n    setSelectedAccommodation(accommodation);\n    setAccommodationDetailOpen(true);\n  };\n\n  /**\n   * Filter accommodations based on search and filter criteria\n   * @returns Array of filtered accommodations or empty array if no accommodations exist\n   */\n  const filteredAccommodations: Accommodation[] = accommodations ? accommodations.filter((accommodation: Accommodation): boolean => {\n    // Search matching - check if search term appears in name\n    const matchesSearch: boolean = search === \"\" || \n      accommodation.name.toLowerCase().includes(search.toLowerCase());\n    \n    // Type filtering\n    const matchesType: boolean = typeFilter === \"all\" || accommodation.type === typeFilter;\n    \n    // Destination filtering\n    const matchesDestination: boolean = destinationFilter === \"all\" || \n      accommodation.destinationId.toString() === destinationFilter;\n    \n    return matchesSearch && matchesType && matchesDestination;\n  }) : [];\n\n  /**\n   * Get destination for an accommodation by ID with proper null handling\n   * @param destinationId The ID of the destination to find\n   * @returns The destination or undefined if not found\n   */\n  const getDestinationForAccommodation = (destinationId: number): Destination | undefined => {\n    if (!destinations) return undefined;\n    return destinations.find((dest: Destination): boolean => dest.id === destinationId);\n  };\n\n  const typeOptions: FilterOption[] = [\n    { value: \"all\", label: \"All Types\" },\n    { value: \"Hotel\", label: \"Hotel\" },\n    { value: \"Resort\", label: \"Resort\" },\n    { value: \"Hostel\", label: \"Hostel\" },\n    { value: \"Apartment\", label: \"Apartment\" },\n    { value: \"Guesthouse\", label: \"Guesthouse\" },\n    { value: \"Villa\", label: \"Villa\" },\n    { value: \"Cabin\", label: \"Cabin\" },\n    { value: \"Camping\", label: \"Camping\" },\n  ];\n\n  /**\n   * Create destination filter options with proper null handling\n   * @returns Array of destination filter options with \"All Destinations\" as first option\n   */\n  const destinationOptions: FilterOption[] = [\n    { value: \"all\", label: \"All Destinations\" },\n    ...(destinations \n      ? destinations.map((dest: Destination): FilterOption => ({\n          value: dest.id.toString(),\n          label: `${dest.name}, ${dest.country}`,\n        })) \n      : [] // Return empty array if no destinations exist\n    ),\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <PageHeader\n        title=\"Accommodations\"\n        description=\"Manage your lodging options for your trips\"\n        buttonLabel=\"Add Accommodation\"\n        buttonIcon={<Plus className=\"h-4 w-4\" />}\n        onButtonClick={() => setFormOpen(true)}\n      />\n\n      <SearchFilter\n        searchPlaceholder=\"Search accommodations...\"\n        onSearchChange={setSearch}\n        filters={[\n          {\n            name: \"Types\",\n            options: typeOptions,\n            value: typeFilter,\n            onChange: setTypeFilter,\n          },\n          {\n            name: \"Destinations\",\n            options: destinationOptions,\n            value: destinationFilter,\n            onChange: setDestinationFilter,\n          },\n        ]}\n      />\n\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <div key={i} className=\"bg-white rounded-lg shadow h-72 animate-pulse\">\n              <div className=\"h-44 bg-gray-200 rounded-t-lg\"></div>\n              <div className=\"p-4\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                <div className=\"h-8 bg-gray-200 rounded w-full\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : filteredAccommodations?.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredAccommodations.map((accommodation: Accommodation) => {\n            const destination = getDestinationForAccommodation(accommodation.destinationId);\n            return destination ? (\n              <AccommodationCard\n                key={accommodation.id}\n                accommodation={accommodation}\n                destination={destination}\n                onEdit={handleEdit}\n                onDelete={handleDelete}\n                onView={handleViewAccommodation}\n              />\n            ) : null;\n          })}\n        </div>\n      ) : (\n        <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n          <p className=\"text-gray-500\">No accommodations found</p>\n          <Button\n            className=\"mt-4 bg-primary hover:bg-primary-800\"\n            onClick={() => setFormOpen(true)}\n          >\n            Add Your First Accommodation\n          </Button>\n        </div>\n      )}\n\n      {/* Create/Edit Accommodation Form */}\n      <AccommodationForm\n        ref={accommodationFormRef}\n        open={formOpen}\n        onOpenChange={handleFormOpenChange}\n        onSubmit={handleCreateOrUpdateAccommodation}\n        onError={(error) => accommodationFormRef.current?.parseServerValidationErrors(error)}\n        defaultValues={editingAccommodation || undefined}\n        isEditing={!!editingAccommodation}\n        isSubmitting={createAccommodation.isPending || updateAccommodation.isPending}\n      />\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Accommodation</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete this accommodation? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setDeleteDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmDelete}\n              disabled={deleteAccommodation.isPending}\n            >\n              {deleteAccommodation.isPending ? \"Deleting...\" : \"Delete\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Accommodation Detail Dialog */}\n      <Dialog open={accommodationDetailOpen} onOpenChange={setAccommodationDetailOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          {selectedAccommodation && (\n            <>\n              <DialogHeader>\n                <DialogTitle>{selectedAccommodation.name}</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"mt-2\">\n                {selectedAccommodation.image && (\n                  <div className=\"w-full h-56 mb-4 overflow-hidden rounded-md\">\n                    <img \n                      src={selectedAccommodation.image} \n                      alt={selectedAccommodation.name} \n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                )}\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Type</h3>\n                      <p className=\"mt-1\">{selectedAccommodation.type}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Destination</h3>\n                      {destinations && (\n                        <p className=\"mt-1\">\n                          {(() => {\n                            const dest = getDestinationForAccommodation(selectedAccommodation.destinationId);\n                            return dest ? `${dest.name}, ${dest.country}` : 'Unknown destination';\n                          })()}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <DialogFooter className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setAccommodationDetailOpen(false);\n                    setSelectedAccommodation(null);\n                  }}\n                >\n                  Close\n                </Button>\n                <Button\n                  onClick={() => {\n                    setAccommodationDetailOpen(false);\n                    handleEdit(selectedAccommodation);\n                  }}\n                >\n                  Edit\n                </Button>\n              </DialogFooter>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Destination Form Modal (opened from empty destination dropdown) */}\n      <DestinationForm\n        open={destinationFormOpen}\n        onOpenChange={(open) => {\n          setDestinationFormOpen(open);\n          // If the destination form is closed, reopen the accommodation form that was likely closed\n          if (!open) {\n            setFormOpen(true);\n          }\n        }}\n        onSubmit={(values) => {\n          // Create a new destination\n          apiRequestWithJson(\"POST\", \"/api/destinations\", values)\n            .then(() => {\n              // Invalidate destinations query to refresh list\n              queryClient.invalidateQueries({ queryKey: [\"/api/destinations\"] });\n              \n              toast({\n                title: \"Success\",\n                description: \"Destination created successfully. Now you can select it for your accommodation.\",\n              });\n              \n              // Close destination form and reopen accommodation form\n              setDestinationFormOpen(false);\n              setFormOpen(true);\n            })\n            .catch(() => {\n              toast({\n                title: \"Error\",\n                description: \"Failed to create destination\",\n                variant: \"destructive\",\n              });\n            });\n        }}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/pages/activities.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'apiRequest' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"apiRequest"},"fix":{"range":[602,613],"text":""},"desc":"Remove unused variable 'apiRequest'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { PageHeader } from \"@/components/common/page-header\";\nimport { SearchFilter } from \"@/components/ui/search-filter\";\nimport { ActivityCard } from \"@/components/activities/activity-card\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus } from \"lucide-react\";\nimport { Activity, Destination, InsertActivity } from \"@shared/schema\";\nimport { ActivityForm } from \"@/components/forms/activity-form\";\nimport { DestinationForm } from \"@/components/forms/destination-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, apiRequestWithJson } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface FilterOption {\n  value: string;\n  label: string;\n}\n\nexport default function Activities() {\n  const { toast } = useToast();\n  const [search, setSearch] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n  const [destinationFilter, setDestinationFilter] = useState(\"\");\n  const [formOpen, setFormOpen] = useState(false);\n  const [editingActivity, setEditingActivity] = useState<Activity | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [activityToDelete, setActivityToDelete] = useState<number | null>(null);\n  const [activityDetailOpen, setActivityDetailOpen] = useState(false);\n  const [selectedActivity, setSelectedActivity] = useState<Activity | null>(null);\n  const [destinationFormOpen, setDestinationFormOpen] = useState(false);\n\n  // Listen for openDestinationForm events to handle destinations modal from dropdown empty state\n  useEffect(() => {\n    /**\n     * Event handler for the openDestinationForm custom event\n     * This allows the destination dropdown empty state to trigger opening the destination form\n     */\n    const handleOpenDestinationForm = () => {\n      setDestinationFormOpen(true);\n    };\n    \n    // Add event listener when component mounts\n    window.addEventListener('openDestinationForm', handleOpenDestinationForm);\n    \n    // Remove event listener when component unmounts\n    return () => {\n      window.removeEventListener('openDestinationForm', handleOpenDestinationForm);\n    };\n  }, []);\n\n  // Fetch activities\n  const { data: activities, isLoading } = useQuery<Activity[]>({\n    queryKey: [\"/api/activities\"],\n  });\n\n  // Fetch destinations\n  const { data: destinations } = useQuery<Destination[]>({\n    queryKey: [\"/api/destinations\"],\n  });\n\n  // Create activity mutation with proper response type\n  const createActivity = useMutation({\n    mutationFn: (newActivity: InsertActivity) => \n      apiRequestWithJson<InsertActivity, Activity>(\"POST\", \"/api/activities\", newActivity),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/activities\"] });\n      toast({\n        title: \"Success\",\n        description: \"Activity created successfully\",\n      });\n      setFormOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create activity\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update activity mutation with proper type for payload\n  interface UpdateActivityParams {\n    id: number;\n    data: Partial<InsertActivity>;\n  }\n  \n  const updateActivity = useMutation({\n    mutationFn: ({ id, data }: UpdateActivityParams) => \n      apiRequestWithJson<Partial<InsertActivity>, Activity>(\"PUT\", `/api/activities/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/activities\"] });\n      toast({\n        title: \"Success\",\n        description: \"Activity updated successfully\",\n      });\n      setEditingActivity(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update activity\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete activity mutation\n  const deleteActivity = useMutation({\n    mutationFn: (id: number) => \n      apiRequestWithJson<null, void>(\"DELETE\", `/api/activities/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/activities\"] });\n      toast({\n        title: \"Success\",\n        description: \"Activity deleted successfully\",\n      });\n      setDeleteDialogOpen(false);\n      setActivityToDelete(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete activity\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateOrUpdateActivity = (values: InsertActivity): void => {\n    if (editingActivity) {\n      updateActivity.mutate({ id: editingActivity.id, data: values });\n    } else {\n      createActivity.mutate(values);\n    }\n  };\n\n  const handleEdit = (activity: Activity): void => {\n    setEditingActivity(activity);\n    setFormOpen(true);\n  };\n\n  const handleDelete = (id: number): void => {\n    setActivityToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = (): void => {\n    if (activityToDelete !== null) {\n      deleteActivity.mutate(activityToDelete);\n    }\n  };\n\n  const handleFormOpenChange = (open: boolean): void => {\n    setFormOpen(open);\n    if (!open) {\n      setEditingActivity(null);\n    }\n  };\n\n  const handleViewActivity = (activity: Activity): void => {\n    setSelectedActivity(activity);\n    setActivityDetailOpen(true);\n  };\n\n  /**\n   * Filter activities based on search and filter criteria\n   * @returns Array of filtered activities or empty array if no activities exist\n   */\n  const filteredActivities: Activity[] = activities ? activities.filter((activity: Activity): boolean => {\n    // Search matching - check if search term appears in name or description\n    const matchesSearch: boolean = search === \"\" || \n      activity.name.toLowerCase().includes(search.toLowerCase()) ||\n      activity.description.toLowerCase().includes(search.toLowerCase());\n    \n    // Category filtering\n    const matchesCategory: boolean = categoryFilter === \"all\" || activity.category === categoryFilter;\n    \n    // Destination filtering\n    const matchesDestination: boolean = destinationFilter === \"all\" || \n      activity.destinationId.toString() === destinationFilter;\n    \n    return matchesSearch && matchesCategory && matchesDestination;\n  }) : [];\n\n  /**\n   * Get destination for an activity by ID with proper null handling\n   * @param destinationId The ID of the destination to find\n   * @returns The destination or undefined if not found\n   */\n  const getDestinationForActivity = (destinationId: number): Destination | undefined => {\n    if (!destinations) return undefined;\n    return destinations.find((dest: Destination): boolean => dest.id === destinationId);\n  };\n\n  const categoryOptions: FilterOption[] = [\n    { value: \"all\", label: \"All Categories\" },\n    { value: \"Sightseeing\", label: \"Sightseeing\" },\n    { value: \"Adventure\", label: \"Adventure\" },\n    { value: \"Culture\", label: \"Culture\" },\n    { value: \"Relaxation\", label: \"Relaxation\" },\n    { value: \"Food\", label: \"Food\" },\n    { value: \"Shopping\", label: \"Shopping\" },\n    { value: \"Nature\", label: \"Nature\" },\n    { value: \"History\", label: \"History\" },\n  ];\n\n  /**\n   * Create destination filter options with proper null handling\n   * @returns Array of destination filter options with \"All Destinations\" as first option\n   */\n  const destinationOptions: FilterOption[] = [\n    { value: \"all\", label: \"All Destinations\" },\n    ...(destinations \n      ? destinations.map((dest: Destination): FilterOption => ({\n          value: dest.id.toString(),\n          label: `${dest.name}, ${dest.country}`,\n        })) \n      : [] // Return empty array if no destinations exist\n    ),\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <PageHeader\n        title=\"Activities\"\n        description=\"Explore and manage activities for your trips\"\n        buttonLabel=\"Add Activity\"\n        buttonIcon={<Plus className=\"h-4 w-4\" />}\n        onButtonClick={() => setFormOpen(true)}\n      />\n\n      <SearchFilter\n        searchPlaceholder=\"Search activities...\"\n        onSearchChange={setSearch}\n        filters={[\n          {\n            name: \"Categories\",\n            options: categoryOptions,\n            value: categoryFilter,\n            onChange: setCategoryFilter,\n          },\n          {\n            name: \"Destinations\",\n            options: destinationOptions,\n            value: destinationFilter,\n            onChange: setDestinationFilter,\n          },\n        ]}\n      />\n\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <div key={i} className=\"bg-white rounded-lg shadow h-72 animate-pulse\">\n              <div className=\"h-44 bg-gray-200 rounded-t-lg\"></div>\n              <div className=\"p-4\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : filteredActivities?.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredActivities.map((activity: Activity) => {\n            const destination = getDestinationForActivity(activity.destinationId);\n            return destination ? (\n              <ActivityCard\n                key={activity.id}\n                activity={activity}\n                destination={destination}\n                onEdit={handleEdit}\n                onDelete={handleDelete}\n                onView={handleViewActivity}\n              />\n            ) : null;\n          })}\n        </div>\n      ) : (\n        <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n          <p className=\"text-gray-500\">No activities found</p>\n          <Button\n            className=\"mt-4 bg-primary hover:bg-primary-800\"\n            onClick={() => setFormOpen(true)}\n          >\n            Add Your First Activity\n          </Button>\n        </div>\n      )}\n\n      {/* Create/Edit Activity Form */}\n      <ActivityForm\n        open={formOpen}\n        onOpenChange={handleFormOpenChange}\n        onSubmit={handleCreateOrUpdateActivity}\n        defaultValues={editingActivity || undefined}\n        isEditing={!!editingActivity}\n      />\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Activity</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete this activity? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setDeleteDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmDelete}\n            >\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Activity Detail Dialog */}\n      <Dialog open={activityDetailOpen} onOpenChange={setActivityDetailOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          {selectedActivity && (\n            <>\n              <DialogHeader>\n                <DialogTitle>{selectedActivity.name}</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"mt-2\">\n                {selectedActivity.image && (\n                  <div className=\"w-full h-56 mb-4 overflow-hidden rounded-md\">\n                    <img \n                      src={selectedActivity.image} \n                      alt={selectedActivity.name} \n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                )}\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"text-sm font-medium text-gray-500\">Description</h3>\n                    <p className=\"mt-1\">{selectedActivity.description}</p>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Category</h3>\n                      <p className=\"mt-1\">{selectedActivity.category}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Destination</h3>\n                      {destinations && (\n                        <p className=\"mt-1\">\n                          {(() => {\n                            const dest = getDestinationForActivity(selectedActivity.destinationId);\n                            return dest ? `${dest.name}, ${dest.country}` : 'Unknown destination';\n                          })()}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <DialogFooter className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setActivityDetailOpen(false);\n                    setSelectedActivity(null);\n                  }}\n                >\n                  Close\n                </Button>\n                <Button\n                  onClick={() => {\n                    setActivityDetailOpen(false);\n                    handleEdit(selectedActivity);\n                  }}\n                >\n                  Edit\n                </Button>\n              </DialogFooter>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Destination Form Modal (opened from empty destination dropdown) */}\n      <DestinationForm\n        open={destinationFormOpen}\n        onOpenChange={(open) => {\n          setDestinationFormOpen(open);\n          // If the destination form is closed, reopen the activity form that was likely closed\n          if (!open) {\n            setFormOpen(true);\n          }\n        }}\n        onSubmit={(values) => {\n          // Create a new destination\n          apiRequestWithJson(\"POST\", \"/api/destinations\", values)\n            .then(() => {\n              // Invalidate destinations query to refresh list\n              queryClient.invalidateQueries({ queryKey: [\"/api/destinations\"] });\n              \n              toast({\n                title: \"Success\",\n                description: \"Destination created successfully. Now you can select it for your activity.\",\n              });\n              \n              // Close destination form and reopen activity form\n              setDestinationFormOpen(false);\n              setFormOpen(true);\n            })\n            .catch(() => {\n              toast({\n                title: \"Error\",\n                description: \"Failed to create destination\",\n                variant: \"destructive\",\n              });\n            });\n        }}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/pages/auth-page.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is assigned a value but never used.","line":37,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[1501,1502],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { useAuth } from \"@/hooks\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Loader2 } from \"lucide-react\";\n\n// Login form schema\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n});\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\n\n// Registration form schema\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n});\n\ntype RegisterFormValues = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [activeTab, setActiveTab] = useState<string>(\"login\");\n  const [_, setLocation] = useLocation();\n  const { user, loginMutation, registerMutation } = useAuth();\n  \n  // Login form - IMPORTANT: Must be defined before any conditional returns\n  const loginForm = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n  \n  // Registration form - IMPORTANT: Must be defined before any conditional returns\n  const registerForm = useForm<RegisterFormValues>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n  \n  // Use useEffect for handling redirects based on auth state\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/\");\n    }\n  }, [user, setLocation]);\n  \n  // If user is authenticated and redirect is pending, show nothing\n  // IMPORTANT: This conditional return must come AFTER all hook declarations\n  if (user) {\n    return null;\n  }\n  \n  const onLoginSubmit = (data: LoginFormValues) => {\n    loginMutation.mutate(data);\n  };\n  \n  const onRegisterSubmit = (data: RegisterFormValues) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"flex min-h-screen\">\n      {/* Form Column */}\n      <div className=\"w-full md:w-1/2 p-6 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-center\">Travel Planner</CardTitle>\n            <CardDescription className=\"text-center\">\n              Sign in to manage your trips and travel plans\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid grid-cols-2 mb-6\">\n                <TabsTrigger value=\"login\">Login</TabsTrigger>\n                <TabsTrigger value=\"register\">Register</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"login\">\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={loginForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter your username\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={loginMutation.isPending}\n                    >\n                      {loginMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Logging in...\n                        </>\n                      ) : (\n                        \"Login\"\n                      )}\n                    </Button>\n                    \n                    {loginMutation.isError && (\n                      <div className=\"text-red-500 text-sm text-center\">\n                        {loginMutation.error.message || \"Login failed. Please try again.\"}\n                      </div>\n                    )}\n                  </form>\n                </Form>\n              </TabsContent>\n              \n              <TabsContent value=\"register\">\n                <Form {...registerForm}>\n                  <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"First name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={registerForm.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Last name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <FormField\n                      control={registerForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Choose a username\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={registerForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter your email\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={registerForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Create a password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                    >\n                      {registerMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Creating account...\n                        </>\n                      ) : (\n                        \"Create account\"\n                      )}\n                    </Button>\n                    \n                    {registerMutation.isError && (\n                      <div className=\"text-red-500 text-sm text-center\">\n                        {registerMutation.error.message || \"Registration failed. Please try again.\"}\n                      </div>\n                    )}\n                  </form>\n                </Form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Separator />\n            <div className=\"text-sm text-center text-gray-500\">\n              By creating an account, you agree to our Terms of Service and Privacy Policy.\n            </div>\n          </CardFooter>\n        </Card>\n      </div>\n      \n      {/* Hero Column - Hidden on mobile */}\n      <div className=\"hidden md:flex md:w-1/2 bg-primary flex-col items-center justify-center text-white p-8\">\n        <div className=\"max-w-md space-y-6\">\n          <h1 className=\"text-4xl font-bold\">Plan Your Perfect Journey</h1>\n          <p className=\"text-lg\">\n            Organize all your travel plans in one place. Manage destinations, activities, \n            accommodations, and create detailed trip itineraries with our easy-to-use tools.\n          </p>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-10 w-10 rounded-full bg-white text-primary flex items-center justify-center font-bold\">1</div>\n              <p>Create and customize your travel destinations</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-10 w-10 rounded-full bg-white text-primary flex items-center justify-center font-bold\">2</div>\n              <p>Add activities and accommodations to your plans</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-10 w-10 rounded-full bg-white text-primary flex items-center justify-center font-bold\">3</div>\n              <p>Organize everything into detailed trip itineraries</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/pages/dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[213,218],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":5,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[217,230],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":9,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"Clock"},"fix":{"range":[434,441],"text":""},"desc":"Remove unused variable 'Clock'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InsertTrip' is defined but never used.","line":10,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"InsertTrip"},"fix":{"range":[497,509],"text":""},"desc":"Remove unused variable 'InsertTrip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isLoadingTrips' is assigned a value but never used.","line":36,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"isLoadingTrips"},"fix":{"range":[1370,1397],"text":""},"desc":"Remove unused variable 'isLoadingTrips'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isLoadingDestinations' is assigned a value but never used.","line":41,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":63,"suggestions":[{"messageId":"removeVar","data":{"varName":"isLoadingDestinations"},"fix":{"range":[1510,1544],"text":""},"desc":"Remove unused variable 'isLoadingDestinations'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":64,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'trip' is defined but never used.","line":108,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":108,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"trip"},"fix":{"range":[3608,3618],"text":""},"desc":"Remove unused variable 'trip'."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { PageHeader } from \"@/components/common/page-header\";\nimport { StatCard } from \"@/components/common/stat-card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\nimport { StatusBadge } from \"@/components/common/status-badge\";\nimport { Building, MapPin, Smile, Calendar, Clock, Plus } from \"lucide-react\";\nimport { Trip, Destination, InsertTrip } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { TripForm } from \"@/components/forms/trip-form\";\nimport { TripApiValues } from \"@/components/forms/trip-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [tripFormOpen, setTripFormOpen] = useState(false);\n\n  // Define interface for dashboard stats\n  interface DashboardStats {\n    upcomingTripsCount: number;\n    destinationsCount: number;\n    activitiesCount: number;\n    accommodationsCount: number;\n  }\n\n  // Fetch dashboard stats\n  const { data: stats, isLoading: isLoadingStats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Fetch trips\n  const { data: trips, isLoading: isLoadingTrips } = useQuery<Trip[]>({\n    queryKey: [\"/api/trips\"],\n  });\n\n  // Fetch destinations\n  const { data: destinations, isLoading: isLoadingDestinations } = useQuery<Destination[]>({\n    queryKey: [\"/api/destinations\"],\n  });\n\n  /**\n   * Handle new trip creation from the form\n   * Converts form values with Date objects to API values with string dates\n   * @param values Form values from TripForm\n   */\n  const handleCreateTrip = async (values: TripApiValues): Promise<void> => {\n    try {\n      // No need to format dates as they're already formatted in the form component\n      await apiRequest(\"POST\", \"/api/trips\", values);\n      \n      toast({\n        title: \"Success\",\n        description: \"Trip created successfully\",\n      });\n      \n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/trips\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setTripFormOpen(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create trip\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Get next upcoming trip\n  const getNextTrip = (): Trip | null => {\n    if (!trips || trips.length === 0) return null;\n    \n    const today = new Date();\n    const upcomingTrips = trips.filter((trip: Trip) => {\n      const startDate = new Date(trip.startDate);\n      return startDate > today && trip.status === \"planned\";\n    });\n    \n    if (upcomingTrips.length === 0) return null;\n    \n    // Sort by start date (closest first)\n    upcomingTrips.sort((a: Trip, b: Trip) => {\n      return new Date(a.startDate).getTime() - new Date(b.startDate).getTime();\n    });\n    \n    return upcomingTrips[0];\n  };\n\n  // Get recent completed trips\n  const getRecentTrips = (): Trip[] => {\n    if (!trips || trips.length === 0) return [];\n    \n    const completedTrips = trips.filter((trip: Trip) => trip.status === \"completed\");\n    \n    // Sort by end date (most recent first)\n    completedTrips.sort((a: Trip, b: Trip) => {\n      return new Date(b.endDate).getTime() - new Date(a.endDate).getTime();\n    });\n    \n    return completedTrips.slice(0, 4);\n  };\n\n  // Get destinations for a trip\n  const getTripDestinations = (trip: Trip): string[] => {\n    // This would normally use the trip-destinations relationship,\n    // but for simplicity in this example, we'll just return the first destination\n    if (!destinations || destinations.length === 0) return [];\n    return [destinations[0].name];\n  };\n\n  // Calculate days to next trip\n  const getDaysToTrip = (trip: Trip): number => {\n    const today = new Date();\n    const startDate = new Date(trip.startDate);\n    const timeDiff = startDate.getTime() - today.getTime();\n    return Math.ceil(timeDiff / (1000 * 3600 * 24));\n  };\n\n  const nextTrip = getNextTrip();\n  const recentTrips = getRecentTrips();\n\n  return (\n    <div className=\"p-6\">\n      <PageHeader\n        title=\"Dashboard\"\n        description=\"Welcome back! Here's an overview of your travel plans.\"\n        buttonLabel=\"Create New Trip\"\n        buttonIcon={<Plus className=\"h-4 w-4\" />}\n        onButtonClick={() => setTripFormOpen(true)}\n      />\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n        <StatCard\n          icon={<Building />}\n          iconColor=\"text-primary\"\n          iconBgColor=\"bg-blue-100\"\n          label=\"Upcoming Trips\"\n          value={isLoadingStats ? \"...\" : stats?.upcomingTripsCount || 0}\n        />\n        <StatCard\n          icon={<MapPin />}\n          iconColor=\"text-accent-400\"\n          iconBgColor=\"bg-amber-100\"\n          label=\"Destinations\"\n          value={isLoadingStats ? \"...\" : stats?.destinationsCount || 0}\n        />\n        <StatCard\n          icon={<Smile />}\n          iconColor=\"text-green-600\"\n          iconBgColor=\"bg-green-100\"\n          label=\"Activities\"\n          value={isLoadingStats ? \"...\" : stats?.activitiesCount || 0}\n        />\n        <StatCard\n          icon={<Building />}\n          iconColor=\"text-purple-600\"\n          iconBgColor=\"bg-purple-100\"\n          label=\"Accommodations\"\n          value={isLoadingStats ? \"...\" : stats?.accommodationsCount || 0}\n        />\n      </div>\n\n      {/* Recent Trips and Upcoming Trip */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Upcoming Trip */}\n        <div className=\"bg-white rounded-lg shadow col-span-1\">\n          <div className=\"p-6 border-b border-gray-border\">\n            <h2 className=\"text-lg font-semibold text-gray-text\">Next Trip</h2>\n          </div>\n          {nextTrip ? (\n            <>\n              <div className=\"relative h-48 overflow-hidden\">\n                <img\n                  src=\"https://images.unsplash.com/photo-1493976040374-85c8e12f0c0e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n                  alt={nextTrip.name}\n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex flex-col justify-end p-6\">\n                  <span className=\"text-white text-xs font-medium bg-primary rounded-full px-2 py-1 inline-block mb-2 w-fit\">\n                    {getDaysToTrip(nextTrip) === 0 ? \"Today\" : \n                     getDaysToTrip(nextTrip) === 1 ? \"Tomorrow\" : \n                     `In ${getDaysToTrip(nextTrip)} days`}\n                  </span>\n                  <h3 className=\"text-white text-xl font-bold\">{nextTrip.name}</h3>\n                  <p className=\"text-white/80 text-sm\">\n                    {getTripDestinations(nextTrip).join(\" • \")}\n                  </p>\n                </div>\n              </div>\n              <div className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n                    <Calendar className=\"h-4 w-4 text-gray-500\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500\">\n                      {format(new Date(nextTrip.startDate), \"MMM d\")} - {format(new Date(nextTrip.endDate), \"MMM d, yyyy\")}\n                    </p>\n                    <p className=\"text-sm font-medium text-gray-text\">\n                      {Math.ceil((new Date(nextTrip.endDate).getTime() - new Date(nextTrip.startDate).getTime()) / (1000 * 60 * 60 * 24))} days\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n                    <Smile className=\"h-4 w-4 text-gray-500\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Activities</p>\n                    <p className=\"text-sm font-medium text-gray-text\">8 planned</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n                    <Building className=\"h-4 w-4 text-gray-500\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Accommodations</p>\n                    <p className=\"text-sm font-medium text-gray-text\">3 booked</p>\n                  </div>\n                </div>\n                \n                <div className=\"mt-6\">\n                  <Link href={`/trips/${nextTrip.id}`}>\n                    <Button className=\"w-full bg-primary hover:bg-primary-800\">\n                      View Trip Details\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"p-6 text-center\">\n              <p className=\"text-gray-500 mb-4\">No upcoming trips planned</p>\n              <Button \n                className=\"bg-primary hover:bg-primary-800\"\n                onClick={() => setTripFormOpen(true)}\n              >\n                Plan a New Trip\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Recent Trips List */}\n        <div className=\"bg-white rounded-lg shadow col-span-1 lg:col-span-2\">\n          <div className=\"p-6 border-b border-gray-border flex justify-between items-center\">\n            <h2 className=\"text-lg font-semibold text-gray-text\">Recent Trips</h2>\n            <Link href=\"/trips\">\n              <div className=\"text-primary text-sm font-medium hover:text-primary-800 cursor-pointer\">\n                View All\n              </div>\n            </Link>\n          </div>\n          <div className=\"divide-y divide-gray-border\">\n            {recentTrips.length > 0 ? (\n              recentTrips.map((trip: Trip) => (\n                <div key={trip.id} className=\"p-4 flex\">\n                  <img\n                    src=\"https://images.unsplash.com/photo-1506929562872-bb421503ef21?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=120\"\n                    alt={trip.name}\n                    className=\"w-24 h-16 object-cover rounded-md mr-4\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <h3 className=\"font-medium text-gray-text\">{trip.name}</h3>\n                        <p className=\"text-sm text-gray-500\">\n                          {format(new Date(trip.startDate), \"MMM d\")} - {format(new Date(trip.endDate), \"MMM d, yyyy\")}\n                        </p>\n                      </div>\n                      <StatusBadge status={trip.status as \"completed\"} />\n                    </div>\n                    <div className=\"flex items-center mt-2 text-xs text-gray-500\">\n                      <span className=\"flex items-center mr-3\">\n                        <MapPin className=\"h-3 w-3 mr-1\" />\n                        {getTripDestinations(trip).length} destinations\n                      </span>\n                      <span className=\"flex items-center mr-3\">\n                        <Smile className=\"h-3 w-3 mr-1\" />\n                        7 activities\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"p-6 text-center\">\n                <p className=\"text-gray-500\">No recent trips to display</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      <TripForm\n        open={tripFormOpen}\n        onOpenChange={setTripFormOpen}\n        onSubmit={handleCreateTrip}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/pages/destinations.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'FilterOption' is defined but never used.","line":14,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"FilterOption"},"fix":{"range":[788,800],"text":""},"desc":"Remove unused variable 'FilterOption'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { PageHeader } from \"@/components/common/page-header\";\nimport { SearchFilter } from \"@/components/ui/search-filter\";\nimport { DestinationCard } from \"@/components/destinations/destination-card\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus } from \"lucide-react\";\nimport { Destination, InsertDestination, Activity, Accommodation } from \"@shared/schema\";\nimport { DestinationForm } from \"@/components/forms/destination-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface FilterOption {\n  value: string;\n  label: string;\n}\n\nexport default function Destinations() {\n  const { toast } = useToast();\n  const [search, setSearch] = useState(\"\");\n  const [regionFilter, setRegionFilter] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [formOpen, setFormOpen] = useState(false);\n  const [editingDestination, setEditingDestination] = useState<Destination | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [destinationToDelete, setDestinationToDelete] = useState<number | null>(null);\n\n  // Fetch destinations\n  const { data: destinations, isLoading } = useQuery<Destination[]>({\n    queryKey: [\"/api/destinations\"],\n  });\n\n  // Fetch activities\n  const { data: activities } = useQuery<Activity[]>({\n    queryKey: [\"/api/activities\"],\n  });\n\n  // Fetch accommodations\n  const { data: accommodations } = useQuery<Accommodation[]>({\n    queryKey: [\"/api/accommodations\"],\n  });\n\n  // Create destination mutation\n  const createDestination = useMutation({\n    mutationFn: (newDestination: InsertDestination) => apiRequest(\"POST\", \"/api/destinations\", newDestination),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/destinations\"] });\n      toast({\n        title: \"Success\",\n        description: \"Destination created successfully\",\n      });\n      setFormOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create destination\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update destination mutation\n  const updateDestination = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: Partial<InsertDestination> }) => apiRequest(\"PUT\", `/api/destinations/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/destinations\"] });\n      toast({\n        title: \"Success\",\n        description: \"Destination updated successfully\",\n      });\n      setEditingDestination(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update destination\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete destination mutation\n  const deleteDestination = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/destinations/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/destinations\"] });\n      toast({\n        title: \"Success\",\n        description: \"Destination deleted successfully\",\n      });\n      setDeleteDialogOpen(false);\n      setDestinationToDelete(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete destination\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateOrUpdateDestination = (values: InsertDestination) => {\n    if (editingDestination) {\n      updateDestination.mutate({ id: editingDestination.id, data: values });\n    } else {\n      createDestination.mutate(values);\n    }\n  };\n\n  const handleEdit = (destination: Destination) => {\n    setEditingDestination(destination);\n  };\n\n  const handleDelete = (id: number) => {\n    setDestinationToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (destinationToDelete !== null) {\n      deleteDestination.mutate(destinationToDelete);\n    }\n  };\n\n  const handleFormOpenChange = (open: boolean) => {\n    setFormOpen(open);\n    if (!open) {\n      setEditingDestination(null);\n    }\n  };\n\n  // Filter destinations based on search and filters\n  const filteredDestinations: Destination[] = destinations?.filter((destination: Destination) => {\n    const matchesSearch = search === \"\" || \n      destination.name.toLowerCase().includes(search.toLowerCase()) ||\n      destination.country.toLowerCase().includes(search.toLowerCase());\n    \n    const matchesRegion = regionFilter === \"all\" || destination.region === regionFilter;\n    const matchesStatus = statusFilter === \"all\" || destination.status === statusFilter;\n    \n    return matchesSearch && matchesRegion && matchesStatus;\n  }) || [];\n\n  // Count activities and accommodations for each destination\n  const getActivityCount = (destinationId: number): number => {\n    if (!activities) return 0;\n    return activities.filter((activity: Activity) => activity.destinationId === destinationId).length;\n  };\n\n  const getAccommodationCount = (destinationId: number): number => {\n    if (!accommodations) return 0;\n    return accommodations.filter((accommodation: Accommodation) => accommodation.destinationId === destinationId).length;\n  };\n\n  const regionOptions = [\n    { value: \"all\", label: \"All Regions\" },\n    { value: \"Africa\", label: \"Africa\" },\n    { value: \"Asia\", label: \"Asia\" },\n    { value: \"Europe\", label: \"Europe\" },\n    { value: \"North America\", label: \"North America\" },\n    { value: \"South America\", label: \"South America\" },\n    { value: \"Oceania\", label: \"Oceania\" },\n    { value: \"Antarctica\", label: \"Antarctica\" },\n  ];\n\n  const statusOptions = [\n    { value: \"all\", label: \"All Status\" },\n    { value: \"visited\", label: \"Visited\" },\n    { value: \"planned\", label: \"Planned\" },\n    { value: \"wishlist\", label: \"Wishlist\" },\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <PageHeader\n        title=\"Destinations\"\n        description=\"Manage your travel destinations\"\n        buttonLabel=\"Add Destination\"\n        buttonIcon={<Plus className=\"h-4 w-4\" />}\n        onButtonClick={() => setFormOpen(true)}\n      />\n\n      <SearchFilter\n        searchPlaceholder=\"Search destinations...\"\n        onSearchChange={setSearch}\n        filters={[\n          {\n            name: \"Regions\",\n            options: regionOptions,\n            value: regionFilter,\n            onChange: setRegionFilter,\n          },\n          {\n            name: \"Status\",\n            options: statusOptions,\n            value: statusFilter,\n            onChange: setStatusFilter,\n          },\n        ]}\n      />\n\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <div key={i} className=\"bg-white rounded-lg shadow h-80 animate-pulse\">\n              <div className=\"h-48 bg-gray-200 rounded-t-lg\"></div>\n              <div className=\"p-5\">\n                <div className=\"h-4 bg-gray-200 rounded w-2/3 mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-4\"></div>\n                <div className=\"flex justify-between mb-4\">\n                  <div className=\"h-3 bg-gray-200 rounded w-1/4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/4\"></div>\n                </div>\n                <div className=\"h-8 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : filteredDestinations?.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredDestinations.map((destination: Destination) => (\n            <DestinationCard\n              key={destination.id}\n              destination={destination}\n              activityCount={getActivityCount(destination.id)}\n              accommodationCount={getAccommodationCount(destination.id)}\n              onEdit={handleEdit}\n              onDelete={handleDelete}\n              onView={() => {}} // This would navigate to destination details\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n          <p className=\"text-gray-500\">No destinations found</p>\n          <Button\n            className=\"mt-4 bg-primary hover:bg-primary-800\"\n            onClick={() => setFormOpen(true)}\n          >\n            Add Your First Destination\n          </Button>\n        </div>\n      )}\n\n      {/* Create/Edit Destination Form */}\n      <DestinationForm\n        open={formOpen || !!editingDestination}\n        onOpenChange={handleFormOpenChange}\n        onSubmit={handleCreateOrUpdateDestination}\n        defaultValues={editingDestination || undefined}\n        isEditing={!!editingDestination}\n      />\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Destination</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete this destination? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setDeleteDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmDelete}\n            >\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/pages/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/pages/profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/pages/settings.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":12,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"Globe"},"fix":{"range":[696,703],"text":""},"desc":"Remove unused variable 'Globe'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'HelpCircle' is defined but never used.","line":12,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":62,"suggestions":[{"messageId":"removeVar","data":{"varName":"HelpCircle"},"fix":{"range":[721,733],"text":""},"desc":"Remove unused variable 'HelpCircle'."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":269,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9919,10005],"text":"\n                Control who can see your information and how it&apos;s used\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9919,10005],"text":"\n                Control who can see your information and how it&lsquo;s used\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9919,10005],"text":"\n                Control who can see your information and how it&#39;s used\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9919,10005],"text":"\n                Control who can see your information and how it&rsquo;s used\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { PageHeader } from \"@/components/common/page-header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Bell, Moon, Sun, Globe, Lock, CreditCard, HelpCircle } from \"lucide-react\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  \n  // Sample settings state\n  const [settings, setSettings] = useState({\n    appearance: {\n      theme: \"light\",\n      language: \"en\",\n      timeFormat: \"12h\"\n    },\n    notifications: {\n      email: true,\n      push: true,\n      tripReminders: true,\n      marketingEmails: false\n    },\n    privacy: {\n      showProfile: true,\n      shareTrips: false,\n      allowFriendRequests: true\n    },\n    security: {\n      twoFactorEnabled: false,\n      receiveLoginAlerts: true\n    }\n  });\n  \n  // Handle setting changes\n  const handleSettingChange = (category: string, setting: string, value: any) => {\n    setSettings({\n      ...settings,\n      [category]: {\n        ...settings[category as keyof typeof settings],\n        [setting]: value\n      }\n    });\n  };\n  \n  // Handle form submission\n  const handleSaveSettings = (category: string) => {\n    // In a real app, this would save to an API\n    toast({\n      title: \"Success\",\n      description: `${category} settings updated successfully`,\n    });\n  };\n  \n  return (\n    <div className=\"p-6\">\n      <PageHeader\n        title=\"Settings\"\n        description=\"Manage your account settings and preferences\"\n      />\n      \n      <Tabs defaultValue=\"appearance\" className=\"w-full\">\n        <TabsList className=\"w-full md:w-auto grid grid-cols-2 md:grid-cols-4 mb-6\">\n          <TabsTrigger value=\"appearance\" className=\"flex items-center\">\n            <Sun className=\"h-4 w-4 mr-2\" />\n            Appearance\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"flex items-center\">\n            <Bell className=\"h-4 w-4 mr-2\" />\n            Notifications\n          </TabsTrigger>\n          <TabsTrigger value=\"privacy\" className=\"flex items-center\">\n            <Lock className=\"h-4 w-4 mr-2\" />\n            Privacy\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center\">\n            <CreditCard className=\"h-4 w-4 mr-2\" />\n            Security\n          </TabsTrigger>\n        </TabsList>\n        \n        {/* Appearance Settings */}\n        <TabsContent value=\"appearance\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Appearance</CardTitle>\n              <CardDescription>\n                Customize how Travel Planner looks and functions\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label>Theme</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Sun className=\"h-4 w-4\" />\n                    <span>Light</span>\n                  </div>\n                  <Switch\n                    checked={settings.appearance.theme === \"dark\"}\n                    onCheckedChange={(checked) => \n                      handleSettingChange(\"appearance\", \"theme\", checked ? \"dark\" : \"light\")\n                    }\n                  />\n                  <div className=\"flex items-center space-x-2\">\n                    <Moon className=\"h-4 w-4\" />\n                    <span>Dark</span>\n                  </div>\n                </div>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-2\">\n                <Label>Language</Label>\n                <Select\n                  value={settings.appearance.language}\n                  onValueChange={(value) => \n                    handleSettingChange(\"appearance\", \"language\", value)\n                  }\n                >\n                  <SelectTrigger className=\"w-full md:w-72\">\n                    <SelectValue placeholder=\"Select a language\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"en\">English</SelectItem>\n                    <SelectItem value=\"es\">Español</SelectItem>\n                    <SelectItem value=\"fr\">Français</SelectItem>\n                    <SelectItem value=\"de\">Deutsch</SelectItem>\n                    <SelectItem value=\"ja\">日本語</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-2\">\n                <Label>Time Format</Label>\n                <Select\n                  value={settings.appearance.timeFormat}\n                  onValueChange={(value) => \n                    handleSettingChange(\"appearance\", \"timeFormat\", value)\n                  }\n                >\n                  <SelectTrigger className=\"w-full md:w-72\">\n                    <SelectValue placeholder=\"Select a time format\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"12h\">12-hour (1:30 PM)</SelectItem>\n                    <SelectItem value=\"24h\">24-hour (13:30)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex justify-end\">\n                <Button \n                  className=\"bg-primary hover:bg-primary-800\"\n                  onClick={() => handleSaveSettings(\"Appearance\")}\n                >\n                  Save Changes\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        {/* Notifications Settings */}\n        <TabsContent value=\"notifications\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Notifications</CardTitle>\n              <CardDescription>\n                Manage how you receive notifications and alerts\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Email Notifications</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Receive notifications via email\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.notifications.email}\n                    onCheckedChange={(checked) => \n                      handleSettingChange(\"notifications\", \"email\", checked)\n                    }\n                  />\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Push Notifications</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Receive push notifications on your device\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.notifications.push}\n                    onCheckedChange={(checked) => \n                      handleSettingChange(\"notifications\", \"push\", checked)\n                    }\n                  />\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Trip Reminders</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Get reminded about upcoming trips\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.notifications.tripReminders}\n                    onCheckedChange={(checked) => \n                      handleSettingChange(\"notifications\", \"tripReminders\", checked)\n                    }\n                  />\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Marketing Emails</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Receive updates about new features and promotions\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.notifications.marketingEmails}\n                    onCheckedChange={(checked) => \n                      handleSettingChange(\"notifications\", \"marketingEmails\", checked)\n                    }\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end\">\n                <Button \n                  className=\"bg-primary hover:bg-primary-800\"\n                  onClick={() => handleSaveSettings(\"Notifications\")}\n                >\n                  Save Changes\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        {/* Privacy Settings */}\n        <TabsContent value=\"privacy\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Privacy</CardTitle>\n              <CardDescription>\n                Control who can see your information and how it's used\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Show Profile</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow others to view your profile\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.privacy.showProfile}\n                    onCheckedChange={(checked) => \n                      handleSettingChange(\"privacy\", \"showProfile\", checked)\n                    }\n                  />\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Share Trips</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Make your trips visible to others\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.privacy.shareTrips}\n                    onCheckedChange={(checked) => \n                      handleSettingChange(\"privacy\", \"shareTrips\", checked)\n                    }\n                  />\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Allow Friend Requests</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Receive friend requests from other users\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.privacy.allowFriendRequests}\n                    onCheckedChange={(checked) => \n                      handleSettingChange(\"privacy\", \"allowFriendRequests\", checked)\n                    }\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end\">\n                <Button \n                  className=\"bg-primary hover:bg-primary-800\"\n                  onClick={() => handleSaveSettings(\"Privacy\")}\n                >\n                  Save Changes\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        {/* Security Settings */}\n        <TabsContent value=\"security\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Security</CardTitle>\n              <CardDescription>\n                Manage your account security settings\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currentPassword\">Current Password</Label>\n                  <Input id=\"currentPassword\" type=\"password\" />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newPassword\">New Password</Label>\n                  <Input id=\"newPassword\" type=\"password\" />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                  <Input id=\"confirmPassword\" type=\"password\" />\n                </div>\n                \n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    toast({\n                      title: \"Coming Soon\",\n                      description: \"Password change functionality will be available soon\",\n                    });\n                  }}\n                >\n                  Change Password\n                </Button>\n                \n                <Separator className=\"my-2\" />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Two-Factor Authentication</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Add an extra layer of security to your account\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.security.twoFactorEnabled}\n                    onCheckedChange={(checked) => \n                      handleSettingChange(\"security\", \"twoFactorEnabled\", checked)\n                    }\n                  />\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Login Alerts</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Receive notifications about new logins to your account\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.security.receiveLoginAlerts}\n                    onCheckedChange={(checked) => \n                      handleSettingChange(\"security\", \"receiveLoginAlerts\", checked)\n                    }\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end\">\n                <Button \n                  className=\"bg-primary hover:bg-primary-800\"\n                  onClick={() => handleSaveSettings(\"Security\")}\n                >\n                  Save Changes\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/pages/trip-builder.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardFooter' is defined but never used.","line":9,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardFooter"},"fix":{"range":[519,531],"text":""},"desc":"Remove unused variable 'CardFooter'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":15,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"Plus"},"fix":{"range":[846,852],"text":""},"desc":"Remove unused variable 'Plus'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":19,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Badge"},"fix":{"range":[1143,1189],"text":""},"desc":"Remove unused variable 'Badge'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":104,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[4256,4268],"text":""},"desc":"Remove unused variable 'error'."}]},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":344,"column":66,"nodeType":"Identifier","messageId":"undef","endLine":344,"endColumn":69},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":380,"column":63,"nodeType":"Identifier","messageId":"undef","endLine":380,"endColumn":66},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":449,"column":70,"nodeType":"Identifier","messageId":"undef","endLine":449,"endColumn":73},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":469,"column":62,"nodeType":"Identifier","messageId":"undef","endLine":469,"endColumn":65},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":515,"column":84,"nodeType":"Identifier","messageId":"undef","endLine":515,"endColumn":87},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":535,"column":66,"nodeType":"Identifier","messageId":"undef","endLine":535,"endColumn":69}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { PageHeader } from \"@/components/common/page-header\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, apiRequestWithJson } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { DestinationForm } from \"@/components/forms/destination-form\";\nimport { Trip, Destination, Activity, Accommodation, InsertTrip } from \"@shared/schema\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { format } from \"date-fns\";\nimport { CalendarIcon, Plus, MapPin, Trash2, Building, Smile } from \"lucide-react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function TripBuilder() {\n  const { toast } = useToast();\n  const [tripName, setTripName] = useState(\"\");\n  const [startDate, setStartDate] = useState<Date | undefined>(new Date());\n  const [endDate, setEndDate] = useState<Date | undefined>(new Date(new Date().setDate(new Date().getDate() + 7)));\n  const [selectedDestinations, setSelectedDestinations] = useState<number[]>([]);\n  const [selectedActivities, setSelectedActivities] = useState<number[]>([]);\n  const [selectedAccommodations, setSelectedAccommodations] = useState<number[]>([]);\n  const [destinationFormOpen, setDestinationFormOpen] = useState(false);\n\n  // Listen for openDestinationForm events to handle destinations modal from dropdown empty state\n  useEffect(() => {\n    /**\n     * Event handler for the openDestinationForm custom event\n     * This allows the destination dropdown empty state to trigger opening the destination form\n     */\n    const handleOpenDestinationForm = () => {\n      setDestinationFormOpen(true);\n    };\n    \n    // Add event listener when component mounts\n    window.addEventListener('openDestinationForm', handleOpenDestinationForm);\n    \n    // Remove event listener when component unmounts\n    return () => {\n      window.removeEventListener('openDestinationForm', handleOpenDestinationForm);\n    };\n  }, []);\n\n  /**\n   * Fetch all destinations for trip planning\n   */\n  const { data: destinations }: { data: Destination[] | undefined } = useQuery<Destination[]>({\n    queryKey: [\"/api/destinations\"],\n  });\n\n  /**\n   * Fetch all activities for trip planning\n   */\n  const { data: activities }: { data: Activity[] | undefined } = useQuery<Activity[]>({\n    queryKey: [\"/api/activities\"],\n  });\n\n  /**\n   * Fetch all accommodations for trip planning\n   */\n  const { data: accommodations }: { data: Accommodation[] | undefined } = useQuery<Accommodation[]>({\n    queryKey: [\"/api/accommodations\"],\n  });\n\n  /**\n   * Create trip mutation\n   * Handles creation of a new trip and adding selected destinations\n   */\n  const createTrip = useMutation<Trip, Error, InsertTrip>({\n    mutationFn: (newTrip: InsertTrip): Promise<Trip> => apiRequestWithJson<InsertTrip, Trip>(\"POST\", \"/api/trips\", newTrip),\n    onSuccess: async (data: Trip): Promise<void> => {\n      const tripId: number = data.id;\n      \n      // Add destinations to trip\n      for (const destinationId of selectedDestinations) {\n        await apiRequest<{ destinationId: number }, unknown>(\n          \"POST\", \n          `/api/trips/${tripId}/destinations`, \n          { destinationId }\n        );\n      }\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/trips\"] });\n      toast({\n        title: \"Success\",\n        description: \"Trip created successfully\",\n      });\n      \n      // Reset form\n      setTripName(\"\");\n      setStartDate(new Date());\n      setEndDate(new Date(new Date().setDate(new Date().getDate() + 7)));\n      setSelectedDestinations([]);\n      setSelectedActivities([]);\n      setSelectedAccommodations([]);\n    },\n    onError: (error: Error): void => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create trip\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  /**\n   * Validates form data and creates a new trip\n   * Properly formats Date objects to string dates for API submission\n   * @returns void\n   */\n  const handleCreateTrip = (): void => {\n    // Validate trip name\n    if (!tripName) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a trip name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate dates\n    if (!startDate || !endDate) {\n      toast({\n        title: \"Error\",\n        description: \"Please select start and end dates\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate destinations\n    if (selectedDestinations.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please select at least one destination\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Prepare trip data with proper date formatting for API submission\n    const newTrip: InsertTrip = {\n      name: tripName,\n      startDate: format(startDate, 'yyyy-MM-dd'), // Format Date to string\n      endDate: format(endDate, 'yyyy-MM-dd'),     // Format Date to string\n      status: \"planned\" as const,                 // Type assertion for literal type\n    };\n\n    // Submit trip creation request\n    createTrip.mutate(newTrip);\n  };\n\n  /**\n   * Find a destination by its ID\n   * @param id The destination ID to find\n   * @returns The matching destination or undefined if not found\n   */\n  const getDestinationById = (id: number): Destination | undefined => {\n    return destinations?.find((destination: Destination): boolean => destination.id === id);\n  };\n\n  /**\n   * Find an activity by its ID\n   * @param id The activity ID to find\n   * @returns The matching activity or undefined if not found\n   */\n  const getActivityById = (id: number): Activity | undefined => {\n    return activities?.find((activity: Activity): boolean => activity.id === id);\n  };\n\n  /**\n   * Find an accommodation by its ID\n   * @param id The accommodation ID to find\n   * @returns The matching accommodation or undefined if not found\n   */\n  const getAccommodationById = (id: number): Accommodation | undefined => {\n    return accommodations?.find((accommodation: Accommodation): boolean => accommodation.id === id);\n  };\n\n  /**\n   * Filter activities to only include those from selected destinations\n   * @returns Array of available activities for selected destinations\n   */\n  const getAvailableActivities = (): Activity[] => {\n    if (!activities) return [];\n    \n    // Filter activities to only include those from selected destinations\n    return activities.filter((activity: Activity): boolean => \n      selectedDestinations.includes(activity.destinationId)\n    );\n  };\n\n  /**\n   * Filter accommodations to only include those from selected destinations\n   * @returns Array of available accommodations for selected destinations\n   */\n  const getAvailableAccommodations = (): Accommodation[] => {\n    if (!accommodations) return [];\n    \n    // Filter accommodations to only include those from selected destinations\n    return accommodations.filter((accommodation: Accommodation): boolean => \n      selectedDestinations.includes(accommodation.destinationId)\n    );\n  };\n\n  /**\n   * Filtered activities based on selected destinations\n   */\n  const availableActivities: Activity[] = getAvailableActivities();\n  \n  /**\n   * Filtered accommodations based on selected destinations\n   */\n  const availableAccommodations: Accommodation[] = getAvailableAccommodations();\n\n  return (\n    <div className=\"p-6\">\n      <PageHeader\n        title=\"Trip Builder\"\n        description=\"Create a new trip by selecting destinations, activities, and accommodations\"\n      />\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Trip Details */}\n        <Card className=\"col-span-1\">\n          <CardHeader>\n            <CardTitle>Trip Details</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"tripName\">Trip Name</Label>\n              <Input\n                id=\"tripName\"\n                placeholder=\"Summer Vacation\"\n                value={tripName}\n                onChange={(e) => setTripName(e.target.value)}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label>Start Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className={cn(\n                      \"w-full justify-start text-left font-normal\",\n                      !startDate && \"text-muted-foreground\"\n                    )}\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {startDate ? format(startDate, \"PPP\") : <span>Pick a date</span>}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={startDate}\n                    onSelect={setStartDate}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label>End Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className={cn(\n                      \"w-full justify-start text-left font-normal\",\n                      !endDate && \"text-muted-foreground\"\n                    )}\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {endDate ? format(endDate, \"PPP\") : <span>Pick a date</span>}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={endDate}\n                    onSelect={setEndDate}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n            \n            <div className=\"pt-4\">\n              <Label>Trip Duration</Label>\n              <p className=\"text-sm text-gray-500\">\n                {startDate && endDate ? (\n                  `${Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))} days`\n                ) : (\n                  \"Select dates to calculate duration\"\n                )}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Destinations */}\n        <Card className=\"col-span-1\">\n          <CardHeader>\n            <CardTitle>Destinations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {/* \n             * Destination dropdown with empty state messaging\n             * \n             * @EmptyState\n             * - When no destinations are available, shows a message \"No destinations—add one\"\n             * - Provides a button to open the destination form modal directly from the dropdown\n             * - Uses a CustomEvent to communicate with parent component to open destination form\n             * - Empty state always includes a call-to-action to ensure users understand how to proceed\n             * - This improves UX by guiding users through necessary steps in correct order\n             */}\n            <div className=\"space-y-2\">\n              <Label>Select Destinations</Label>\n              <Select\n                onValueChange={(value) => {\n                  const destinationId = parseInt(value);\n                  if (!selectedDestinations.includes(destinationId)) {\n                    setSelectedDestinations([...selectedDestinations, destinationId]);\n                  }\n                }}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Add a destination\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {(destinations && destinations.length > 0) ? (\n                    destinations.map((destination: Destination): JSX.Element => (\n                      <SelectItem \n                        key={destination.id} \n                        value={destination.id.toString()}\n                        disabled={selectedDestinations.includes(destination.id)}\n                      >\n                        {destination.name}, {destination.country}\n                      </SelectItem>\n                    ))\n                  ) : (\n                    <div className=\"px-2 py-4 text-center\">\n                      <p className=\"text-sm text-muted-foreground mb-2\">No destinations—add one</p>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"w-full\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          // Trigger an event to open the destination form\n                          window.dispatchEvent(new CustomEvent('openDestinationForm'));\n                        }}\n                      >\n                        Add Destination\n                      </Button>\n                    </div>\n                  )}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"mt-4 space-y-2\">\n              <Label>Selected Destinations</Label>\n              {selectedDestinations.length === 0 ? (\n                <p className=\"text-sm text-gray-500\">No destinations selected</p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {selectedDestinations.map((destId: number): JSX.Element | null => {\n                    const destination: Destination | undefined = getDestinationById(destId);\n                    \n                    return destination ? (\n                      <div key={destId} className=\"flex items-center justify-between bg-gray-50 p-2 rounded-md\">\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 text-primary mr-2\" />\n                          <span>{destination.name}, {destination.country}</span>\n                        </div>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={(): void => {\n                            // Remove this destination from selected destinations\n                            const filteredDestinations: number[] = selectedDestinations.filter(\n                              (id: number): boolean => id !== destId\n                            );\n                            setSelectedDestinations(filteredDestinations);\n                            \n                            // Also remove any activities from this destination\n                            const filteredActivities: number[] = selectedActivities.filter((actId: number): boolean => {\n                              const activity: Activity | undefined = getActivityById(actId);\n                              return activity ? activity.destinationId !== destId : false;\n                            });\n                            setSelectedActivities(filteredActivities);\n                            \n                            // Also remove any accommodations from this destination\n                            const filteredAccommodations: number[] = selectedAccommodations.filter((accId: number): boolean => {\n                              const accommodation: Accommodation | undefined = getAccommodationById(accId);\n                              return accommodation ? accommodation.destinationId !== destId : false;\n                            });\n                            setSelectedAccommodations(filteredAccommodations);\n                          }}\n                        >\n                          <Trash2 className=\"h-4 w-4 text-gray-500\" />\n                        </Button>\n                      </div>\n                    ) : null;\n                  })}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Activities and Accommodations */}\n        <Card className=\"col-span-1\">\n          <CardHeader>\n            <CardTitle>Activities & Accommodations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Select Activities</Label>\n                {availableActivities.length === 0 ? (\n                  <p className=\"text-sm text-gray-500\">Select destinations to see available activities</p>\n                ) : (\n                  <Select\n                    onValueChange={(value) => {\n                      const activityId = parseInt(value);\n                      if (!selectedActivities.includes(activityId)) {\n                        setSelectedActivities([...selectedActivities, activityId]);\n                      }\n                    }}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Add an activity\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableActivities.map((activity: Activity): JSX.Element => (\n                        <SelectItem \n                          key={activity.id} \n                          value={activity.id.toString()}\n                          disabled={selectedActivities.includes(activity.id)}\n                        >\n                          {activity.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Selected Activities</Label>\n                {selectedActivities.length === 0 ? (\n                  <p className=\"text-sm text-gray-500\">No activities selected</p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {selectedActivities.map((actId: number): JSX.Element | null => {\n                      const activity: Activity | undefined = getActivityById(actId);\n                      return activity ? (\n                        <div key={actId} className=\"flex items-center justify-between bg-gray-50 p-2 rounded-md\">\n                          <div className=\"flex items-center\">\n                            <Smile className=\"h-4 w-4 text-primary mr-2\" />\n                            <span>{activity.name}</span>\n                          </div>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={(): void => {\n                              const filteredActivities: number[] = selectedActivities.filter(\n                                (id: number): boolean => id !== actId\n                              );\n                              setSelectedActivities(filteredActivities);\n                            }}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-gray-500\" />\n                          </Button>\n                        </div>\n                      ) : null;\n                    })}\n                  </div>\n                )}\n              </div>\n\n              <Separator className=\"my-4\" />\n\n              <div className=\"space-y-2\">\n                <Label>Select Accommodations</Label>\n                {availableAccommodations.length === 0 ? (\n                  <p className=\"text-sm text-gray-500\">Select destinations to see available accommodations</p>\n                ) : (\n                  <Select\n                    onValueChange={(value) => {\n                      const accommodationId = parseInt(value);\n                      if (!selectedAccommodations.includes(accommodationId)) {\n                        setSelectedAccommodations([...selectedAccommodations, accommodationId]);\n                      }\n                    }}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Add an accommodation\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableAccommodations.map((accommodation: Accommodation): JSX.Element => (\n                        <SelectItem \n                          key={accommodation.id} \n                          value={accommodation.id.toString()}\n                          disabled={selectedAccommodations.includes(accommodation.id)}\n                        >\n                          {accommodation.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Selected Accommodations</Label>\n                {selectedAccommodations.length === 0 ? (\n                  <p className=\"text-sm text-gray-500\">No accommodations selected</p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {selectedAccommodations.map((accId: number): JSX.Element | null => {\n                      const accommodation: Accommodation | undefined = getAccommodationById(accId);\n                      return accommodation ? (\n                        <div key={accId} className=\"flex items-center justify-between bg-gray-50 p-2 rounded-md\">\n                          <div className=\"flex items-center\">\n                            <Building className=\"h-4 w-4 text-primary mr-2\" />\n                            <span>{accommodation.name}</span>\n                          </div>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={(): void => {\n                              const filteredAccommodations: number[] = selectedAccommodations.filter(\n                                (id: number): boolean => id !== accId\n                              );\n                              setSelectedAccommodations(filteredAccommodations);\n                            }}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-gray-500\" />\n                          </Button>\n                        </div>\n                      ) : null;\n                    })}\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"mt-6 flex justify-end\">\n        <Button \n          className=\"bg-primary hover:bg-primary-800 px-6\"\n          onClick={handleCreateTrip}\n          disabled={createTrip.isPending}\n        >\n          {createTrip.isPending ? \"Creating...\" : \"Create Trip\"}\n        </Button>\n      </div>\n\n      {/* Destination Form Modal (opened from empty destination dropdown) */}\n      <DestinationForm\n        open={destinationFormOpen}\n        onOpenChange={(open) => {\n          setDestinationFormOpen(open);\n        }}\n        onSubmit={(values) => {\n          // Create a new destination\n          apiRequestWithJson(\"POST\", \"/api/destinations\", values)\n            .then(() => {\n              // Invalidate destinations query to refresh list\n              queryClient.invalidateQueries({ queryKey: [\"/api/destinations\"] });\n              \n              toast({\n                title: \"Success\",\n                description: \"Destination created successfully. Now you can add it to your trip.\",\n              });\n              \n              // Close destination form\n              setDestinationFormOpen(false);\n            })\n            .catch(() => {\n              toast({\n                title: \"Error\",\n                description: \"Failed to create destination\",\n                variant: \"destructive\",\n              });\n            });\n        }}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/client/src/pages/trips.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":5,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"Calendar"},"fix":{"range":[234,244],"text":""},"desc":"Remove unused variable 'Calendar'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'StatusBadge' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"StatusBadge"},"fix":{"range":[792,855],"text":""},"desc":"Remove unused variable 'StatusBadge'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"format"},"fix":{"range":[856,890],"text":""},"desc":"Remove unused variable 'format'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[900,905],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":16,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[904,917],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'destinations' is assigned a value but never used.","line":39,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"destinations"},"fix":{"range":[1632,1731],"text":""},"desc":"Remove unused variable 'destinations'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'activities' is assigned a value but never used.","line":44,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"activities"},"fix":{"range":[1757,1849],"text":""},"desc":"Remove unused variable 'activities'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'accommodations' is assigned a value but never used.","line":49,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"accommodations"},"fix":{"range":[1879,1984],"text":""},"desc":"Remove unused variable 'accommodations'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleEdit' is assigned a value but never used.","line":131,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleEdit"},"fix":{"range":[4232,4328],"text":""},"desc":"Remove unused variable 'handleEdit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDelete' is assigned a value but never used.","line":136,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":136,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDelete"},"fix":{"range":[4332,4437],"text":""},"desc":"Remove unused variable 'handleDelete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'trip' is defined but never used.","line":191,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"trip"},"fix":{"range":[6157,6167],"text":""},"desc":"Remove unused variable 'trip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'trip' is defined but never used.","line":227,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":227,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"trip"},"fix":{"range":[7516,7526],"text":""},"desc":"Remove unused variable 'trip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":297,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":297,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[10373,10375],"text":""},"desc":"Remove unused variable 'id'."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { PageHeader } from \"@/components/common/page-header\";\nimport { SearchFilter } from \"@/components/ui/search-filter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Calendar } from \"lucide-react\";\nimport { Trip, Destination, InsertTrip, Activity, Accommodation } from \"@shared/schema\";\nimport { TripForm } from \"@/components/forms/trip-form\";\nimport { TripApiValues } from \"@/components/forms/trip-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge } from \"@/components/common/status-badge\";\nimport { format } from \"date-fns\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { TripCard } from \"@/components/trips/trip-card\";\n\ninterface FilterOption {\n  value: string;\n  label: string;\n}\n\nexport default function Trips() {\n  const { toast } = useToast();\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [formOpen, setFormOpen] = useState(false);\n  const [editingTrip, setEditingTrip] = useState<Trip | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [tripToDelete, setTripToDelete] = useState<number | null>(null);\n\n  // Fetch trips\n  const { data: trips, isLoading } = useQuery<Trip[]>({\n    queryKey: [\"/api/trips\"],\n  });\n\n  // Fetch destinations\n  const { data: destinations } = useQuery<Destination[]>({\n    queryKey: [\"/api/destinations\"],\n  });\n\n  // Fetch activities\n  const { data: activities } = useQuery<Activity[]>({\n    queryKey: [\"/api/activities\"],\n  });\n\n  // Fetch accommodations\n  const { data: accommodations } = useQuery<Accommodation[]>({\n    queryKey: [\"/api/accommodations\"],\n  });\n\n  // Create trip mutation\n  const createTrip = useMutation({\n    mutationFn: (newTrip: InsertTrip) => apiRequest(\"POST\", \"/api/trips\", newTrip),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/trips\"] });\n      toast({\n        title: \"Success\",\n        description: \"Trip created successfully\",\n      });\n      setFormOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create trip\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update trip mutation\n  const updateTrip = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: Partial<InsertTrip> }) => apiRequest(\"PUT\", `/api/trips/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/trips\"] });\n      toast({\n        title: \"Success\",\n        description: \"Trip updated successfully\",\n      });\n      setEditingTrip(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update trip\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete trip mutation\n  const deleteTrip = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/trips/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/trips\"] });\n      toast({\n        title: \"Success\",\n        description: \"Trip deleted successfully\",\n      });\n      setDeleteDialogOpen(false);\n      setTripToDelete(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete trip\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Use the correct type for the form submission values\n  const handleCreateOrUpdateTrip = (values: TripApiValues): void => {\n    // Convert to InsertTrip format expected by the mutations\n    const tripData: InsertTrip = {\n      name: values.name,\n      startDate: values.startDate,  // Already in the correct string format\n      endDate: values.endDate,      // Already in the correct string format\n      status: values.status,\n    };\n    \n    if (editingTrip) {\n      updateTrip.mutate({ id: editingTrip.id, data: tripData });\n    } else {\n      createTrip.mutate(tripData);\n    }\n  };\n\n  const handleEdit = (trip: Trip): void => {\n    setEditingTrip(trip);\n    setFormOpen(true);\n  };\n\n  const handleDelete = (id: number): void => {\n    setTripToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = (): void => {\n    if (tripToDelete !== null) {\n      deleteTrip.mutate(tripToDelete);\n    }\n  };\n\n  const handleFormOpenChange = (open: boolean): void => {\n    setFormOpen(open);\n    if (!open) {\n      setEditingTrip(null);\n    }\n  };\n\n  /**\n   * Filter trips based on search term and status filter\n   * @returns Array of filtered Trip objects or empty array if no trips exist\n   */\n  const filteredTrips: Trip[] = trips ? trips.filter((trip: Trip): boolean => {\n    // Match trip name against search term (case-insensitive)\n    const matchesSearch: boolean = search === \"\" || \n      trip.name.toLowerCase().includes(search.toLowerCase());\n    \n    // Match trip status against selected status filter\n    const matchesStatus: boolean = statusFilter === \"all\" || trip.status === statusFilter;\n    \n    // Trip must match both conditions to be included\n    return matchesSearch && matchesStatus;\n  }) : [];\n\n  /**\n   * Sort trips chronologically by start date (upcoming first)\n   * @returns New array with sorted Trip objects\n   */\n  const sortedTrips: Trip[] = [...filteredTrips].sort((a: Trip, b: Trip): number => {\n    // Convert string dates to timestamps for comparison\n    const dateA: number = new Date(a.startDate).getTime();\n    const dateB: number = new Date(b.startDate).getTime();\n    \n    // Sort ascending by date (earlier dates first)\n    return dateA - dateB;\n  });\n\n  /**\n   * Get destination names for a trip\n   * In a production app, this would fetch actual trip-destination relationships\n   * from the database using the tripId\n   * \n   * @param trip The trip object to get destinations for\n   * @returns Array of destination name strings\n   */\n  const getTripDestinations = (trip: Trip): string[] => {\n    // In a real implementation, we'd fetch the trip-destinations relationship\n    // using the TripDestination table and join with Destination\n    \n    // For now, return placeholder destinations\n    // This would be replaced with actual destination data in production\n    return [\"Tokyo\", \"Kyoto\", \"Osaka\"];\n  };\n\n  /**\n   * Calculate days until trip starts or return status message\n   * @param trip The trip object containing dates and status\n   * @returns A number for days remaining or string for completed/cancelled status\n   */\n  const getDaysToTrip = (trip: Trip): number | string => {\n    // Handle completed or cancelled trips with status strings\n    if (trip.status === \"completed\") {\n      return \"Completed\";\n    } else if (trip.status === \"cancelled\") {\n      return \"Cancelled\";\n    }\n    \n    // For active trips, calculate days remaining\n    const today: Date = new Date();\n    const startDate: Date = new Date(trip.startDate);\n    const timeDiff: number = startDate.getTime() - today.getTime();\n    \n    // Return days to trip as a number (milliseconds to days)\n    return Math.ceil(timeDiff / (1000 * 3600 * 24));\n  };\n\n  /**\n   * Get a representative image for a trip\n   * @param trip The trip object to get an image for\n   * @returns URL string for the trip's representative image\n   */\n  const getTripImage = (trip: Trip): string => {\n    // In a real implementation, we'd get an image based on the trip's destinations\n    // This would typically come from a destination's image property or an image service\n    \n    // For now, return a placeholder image\n    return \"https://images.unsplash.com/photo-1493976040374-85c8e12f0c0e\";\n  };\n\n  const statusOptions: FilterOption[] = [\n    { value: \"all\", label: \"All Status\" },\n    { value: \"planned\", label: \"Planned\" },\n    { value: \"completed\", label: \"Completed\" },\n    { value: \"cancelled\", label: \"Cancelled\" },\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <PageHeader\n        title=\"Trips\"\n        description=\"Manage your travel plans and adventures\"\n        buttonLabel=\"Create New Trip\"\n        buttonIcon={<Plus className=\"h-4 w-4\" />}\n        onButtonClick={() => setFormOpen(true)}\n      />\n\n      <SearchFilter\n        searchPlaceholder=\"Search trips...\"\n        onSearchChange={setSearch}\n        filters={[\n          {\n            name: \"Status\",\n            options: statusOptions,\n            value: statusFilter,\n            onChange: setStatusFilter,\n          },\n        ]}\n      />\n\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"bg-white rounded-lg shadow h-96 animate-pulse\">\n              <div className=\"h-48 bg-gray-200 rounded-t-lg\"></div>\n              <div className=\"p-5\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-full mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-full mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-full mb-4\"></div>\n                <div className=\"h-8 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : sortedTrips?.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {sortedTrips.map((trip: Trip) => {\n            const isUpcoming = new Date(trip.startDate) > new Date() && trip.status === \"planned\";\n            return (\n              <TripCard\n                key={trip.id}\n                trip={trip}\n                image={getTripImage(trip)}\n                destinations={getTripDestinations(trip)}\n                activitiesCount={8} // This would come from a real count in a full implementation\n                accommodationsCount={3} // This would come from a real count in a full implementation\n                daysToTrip={isUpcoming ? \n                  typeof getDaysToTrip(trip) === 'number' ? getDaysToTrip(trip) as number : undefined\n                  : undefined\n                }\n                onView={(id) => {\n                  // This would navigate to trip details\n                  toast({\n                    title: \"Coming Soon\",\n                    description: \"Trip details view is under development\",\n                  });\n                }}\n              />\n            );\n          })}\n        </div>\n      ) : (\n        <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n          <p className=\"text-gray-500\">No trips found</p>\n          <Button\n            className=\"mt-4 bg-primary hover:bg-primary-800\"\n            onClick={() => setFormOpen(true)}\n          >\n            Plan Your First Trip\n          </Button>\n        </div>\n      )}\n\n      {/* Create/Edit Trip Form */}\n      <TripForm\n        open={formOpen}\n        onOpenChange={handleFormOpenChange}\n        onSubmit={handleCreateOrUpdateTrip}\n        defaultValues={editingTrip || undefined}\n        isEditing={!!editingTrip}\n      />\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Trip</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete this trip? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setDeleteDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmDelete}\n            >\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/@types/vite.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/auth.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'UserType' is defined but never used.","line":7,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"UserType"},"fix":{"range":[233,283],"text":""},"desc":"Remove unused variable 'UserType'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Express' is defined but never used.","line":14,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"Express"},"fix":{"range":[430,437],"text":""},"desc":"Remove unused variable 'Express'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":16,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"User"},"fix":{"range":[512,516],"text":""},"desc":"Remove unused variable 'User'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'password' is assigned a value but never used.","line":116,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"password"},"fix":{"range":[3373,3382],"text":""},"desc":"Remove unused variable 'password'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'password' is assigned a value but never used.","line":163,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"password"},"fix":{"range":[4999,5008],"text":""},"desc":"Remove unused variable 'password'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'password' is assigned a value but never used.","line":185,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"password"},"fix":{"range":[5533,5542],"text":""},"desc":"Remove unused variable 'password'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'password' is assigned a value but never used.","line":247,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":247,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"password"},"fix":{"range":[7669,7678],"text":""},"desc":"Remove unused variable 'password'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport { User as UserType } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Import User type from schema\nimport type { User as SchemaUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    // Use the schema type directly to ensure consistency\n    interface User extends SchemaUser {}\n  }\n}\n\n// Cost factor: higher is more secure but slower\nconst SALT_ROUNDS = 12;\n\nasync function hashPassword(password: string) {\n  return bcrypt.hash(password, SALT_ROUNDS);\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  return bcrypt.compare(supplied, stored);\n}\n\nexport function setupAuth(app: Express) {\n  // Set up session\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"travel-planner-session-secret\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    name: 'sid_travel_planner',\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      sameSite: 'strict',\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 1 week\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Configure passport\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    })\n  );\n\n  passport.serializeUser((user, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Registration validation schema\n  const registrationSchema = z.object({\n    username: z.string().min(3).max(20),\n    email: z.string().email(),\n    password: z.string().min(8),\n    firstName: z.string().optional(),\n    lastName: z.string().optional()\n  });\n\n  // Authentication routes\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      // Validate the request body\n      const validatedData = registrationSchema.parse(req.body);\n\n      // Check if username or email already exists\n      const existingUserByUsername = await storage.getUserByUsername(validatedData.username);\n      if (existingUserByUsername) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingUserByEmail = await storage.getUserByEmail(validatedData.email);\n      if (existingUserByEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      // Hash the password\n      const hashedPassword = await hashPassword(validatedData.password);\n\n      // Create the user\n      const user = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword\n      });\n\n      // Remove password from response\n      const { password, ...userWithoutPassword } = user;\n\n      // Log the user in\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(userWithoutPassword);\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", async (err: Error | null, user: Express.User | false, info: { message: string } | undefined) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n      }\n\n      try {\n        // Get current login count or default to 0\n        const currentLoginCount = typeof user.loginCount === 'number' ? user.loginCount : 0;\n        \n        // Update login tracking information\n        await storage.updateUser(user.id, {\n          lastLogin: new Date(),\n          loginCount: currentLoginCount + 1\n        });\n        \n        // Refresh user data after update\n        const updatedUser = await storage.getUser(user.id);\n        if (!updatedUser) {\n          return res.status(500).json({ message: \"Failed to retrieve updated user data\" });\n        }\n\n        // Type assertion for login - we've already validated updatedUser is not null above\n        const typedUser = updatedUser as Express.User;\n        req.login(typedUser, (err) => {\n          if (err) return next(err);\n\n          // Remove password from response\n          const { password, ...userWithoutPassword } = updatedUser;\n          res.json(userWithoutPassword);\n        });\n      } catch (error) {\n        next(error);\n      }\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    // Remove password from response\n    const { password, ...userWithoutPassword } = req.user as Express.User;\n    res.json(userWithoutPassword);\n  });\n\n  /**\n   * Update User Profile Endpoint\n   * \n   * @description Allows authenticated users to update their profile information\n   * excluding sensitive fields like password.\n   * \n   * @security\n   * - Requires authentication\n   * - Validates input data\n   * - Only allows updates to the authenticated user's profile\n   * \n   * @returns Updated user profile without sensitive fields like password\n   */\n  const updateProfileSchema = z.object({\n    firstName: z.string().optional(),\n    lastName: z.string().optional(),\n    email: z.string().email().optional(),\n    bio: z.string().optional(),\n    location: z.string().optional(),\n    phone: z.string().optional(),\n    avatar: z.string().optional()\n  });\n\n  app.put(\"/api/user\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      // Validate request body\n      const validatedData = updateProfileSchema.parse(req.body);\n\n      // If email is being updated, check if it already exists\n      if (validatedData.email) {\n        const existingUserWithEmail = await storage.getUserByEmail(validatedData.email);\n        if (existingUserWithEmail && existingUserWithEmail.id !== req.user.id) {\n          return res.status(400).json({ message: \"Email already in use\" });\n        }\n      }\n\n      // Update user profile\n      const updatedUser = await storage.updateUser(req.user.id, validatedData);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Update session with fresh user data\n      const freshUser = await storage.getUser(req.user.id);\n      if (!freshUser) {\n        return res.status(500).json({ message: \"Failed to refresh user data\" });\n      }\n      \n      // Type assertion for login - freshUser is validated above\n      const typedUser = freshUser as Express.User;\n      req.login(typedUser, (err) => {\n        if (err) return next(err);\n        \n        // Return user without password\n        const { password, ...userWithoutPassword } = updatedUser;\n        res.json(userWithoutPassword);\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      next(error);\n    }\n  });\n\n  /**\n   * Change Password Endpoint\n   * \n   * @description Allows authenticated users to update their password\n   * \n   * @security\n   * - Requires authentication\n   * - Validates current password before allowing change\n   * - Enforces password complexity requirements\n   * - Securely hashes the new password\n   * \n   * @returns Success message on successful password change\n   */\n  const passwordChangeSchema = z.object({\n    currentPassword: z.string(),\n    newPassword: z.string().min(8, \"Password must be at least 8 characters\")\n      .regex(/[a-z]/, \"Password must contain at least one lowercase letter\")\n      .regex(/[A-Z]/, \"Password must contain at least one uppercase letter\")\n      .regex(/[0-9]/, \"Password must contain at least one number\")\n  });\n\n  app.post(\"/api/user/change-password\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      // Validate request body\n      const validatedData = passwordChangeSchema.parse(req.body);\n\n      // Verify current password\n      const user = await storage.getUser(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const isCurrentPasswordValid = await comparePasswords(\n        validatedData.currentPassword, \n        user.password\n      );\n\n      if (!isCurrentPasswordValid) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Hash new password\n      const hashedNewPassword = await hashPassword(validatedData.newPassword);\n\n      // Update password\n      await storage.updateUser(req.user.id, { password: hashedNewPassword });\n\n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      next(error);\n    }\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_next' is defined but never used.","line":48,"column":97,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":116,"suggestions":[{"messageId":"removeVar","data":{"varName":"_next"},"fix":{"range":[1501,1522],"text":""},"desc":"Remove unused variable '_next'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { setupMiddleware } from \"./middleware\";\nimport cookieParser from \"cookie-parser\";\n\nconst app = express();\napp.use(cookieParser()); // Required for csurf with cookie option\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Set up rate limiting and CSRF protection\nsetupMiddleware(app);\n\napp.use((req: Request, res: Response, next: NextFunction): void => {\n  const start: number = Date.now();\n  const path: string = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson: any): Response {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.call(res, bodyJson);\n  };\n\n  res.on(\"finish\", (): void => {\n    const duration: number = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine: string = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async (): Promise<void> => {\n  const server = await registerRoutes(app);\n\n  app.use((err: Error & { status?: number; statusCode?: number }, _req: Request, res: Response, _next: NextFunction): void => {\n    const status: number = err.status || err.statusCode || 500;\n    const message: string = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port: number = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, (): void => {\n    log(`serving on port ${port}`);\n  });\n})();\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/routes.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":20,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":35,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":83,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":101,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":101,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":116,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":164,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":164,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":182,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":182,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":197,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":197,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":245,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":255,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":255,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":270,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":270,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":318,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":318,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":329,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":329,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":366,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":366,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":376,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":376,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'_next' is defined but never used.","line":400,"column":97,"nodeType":"Identifier","messageId":"unusedVar","endLine":400,"endColumn":116,"suggestions":[{"messageId":"removeVar","data":{"varName":"_next"},"fix":{"range":[14023,14044],"text":""},"desc":"Remove unused variable '_next'."}]},{"ruleId":"no-undef","severity":2,"message":"'NextFunction' is not defined.","line":400,"column":104,"nodeType":"Identifier","messageId":"undef","endLine":400,"endColumn":116}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertDestinationSchema, insertActivitySchema, insertAccommodationSchema, \n  insertTripSchema, insertTripDestinationSchema,\n  Destination, Activity, Accommodation, Trip, TripDestination\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { setupAuth } from \"./auth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Set up authentication\n  setupAuth(app);\n  // Destinations\n  app.get(\"/api/destinations\", async (req: Request, res: Response) => {\n    try {\n      const destinations: Destination[] = await storage.getDestinations();\n      res.json(destinations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch destinations\" });\n    }\n  });\n  \n  app.get(\"/api/destinations/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const destination: Destination | undefined = await storage.getDestination(id);\n      \n      if (!destination) {\n        return res.status(404).json({ message: \"Destination not found\" });\n      }\n      \n      res.json(destination);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch destination\" });\n    }\n  });\n  \n  app.post(\"/api/destinations\", async (req: Request, res: Response) => {\n    try {\n      const destinationData = insertDestinationSchema.parse(req.body);\n      const newDestination: Destination = await storage.createDestination(destinationData);\n      res.status(201).json(newDestination);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid destination data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create destination\" });\n    }\n  });\n  \n  app.put(\"/api/destinations/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const destinationData = insertDestinationSchema.partial().parse(req.body);\n      \n      const updatedDestination: Destination | undefined = await storage.updateDestination(id, destinationData);\n      \n      if (!updatedDestination) {\n        return res.status(404).json({ message: \"Destination not found\" });\n      }\n      \n      res.json(updatedDestination);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid destination data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update destination\" });\n    }\n  });\n  \n  app.delete(\"/api/destinations/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const success: boolean = await storage.deleteDestination(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Destination not found\" });\n      }\n      \n      res.status(204).end();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete destination\" });\n    }\n  });\n  \n  // Activities\n  app.get(\"/api/activities\", async (req: Request, res: Response) => {\n    try {\n      const { destinationId } = req.query;\n      let activities: Activity[];\n      \n      if (destinationId) {\n        activities = await storage.getActivitiesByDestination(parseInt(destinationId as string));\n      } else {\n        activities = await storage.getActivities();\n      }\n      \n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n  \n  app.get(\"/api/activities/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const activity: Activity | undefined = await storage.getActivity(id);\n      \n      if (!activity) {\n        return res.status(404).json({ message: \"Activity not found\" });\n      }\n      \n      res.json(activity);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch activity\" });\n    }\n  });\n  \n  app.post(\"/api/activities\", async (req: Request, res: Response) => {\n    try {\n      const activityData = insertActivitySchema.parse(req.body);\n      const newActivity: Activity = await storage.createActivity(activityData);\n      res.status(201).json(newActivity);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid activity data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create activity\" });\n    }\n  });\n  \n  app.put(\"/api/activities/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const activityData = insertActivitySchema.partial().parse(req.body);\n      \n      const updatedActivity: Activity | undefined = await storage.updateActivity(id, activityData);\n      \n      if (!updatedActivity) {\n        return res.status(404).json({ message: \"Activity not found\" });\n      }\n      \n      res.json(updatedActivity);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid activity data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update activity\" });\n    }\n  });\n  \n  app.delete(\"/api/activities/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const success: boolean = await storage.deleteActivity(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Activity not found\" });\n      }\n      \n      res.status(204).end();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete activity\" });\n    }\n  });\n  \n  // Accommodations\n  app.get(\"/api/accommodations\", async (req: Request, res: Response) => {\n    try {\n      const { destinationId } = req.query;\n      let accommodations: Accommodation[];\n      \n      if (destinationId) {\n        accommodations = await storage.getAccommodationsByDestination(parseInt(destinationId as string));\n      } else {\n        accommodations = await storage.getAccommodations();\n      }\n      \n      res.json(accommodations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch accommodations\" });\n    }\n  });\n  \n  app.get(\"/api/accommodations/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const accommodation: Accommodation | undefined = await storage.getAccommodation(id);\n      \n      if (!accommodation) {\n        return res.status(404).json({ message: \"Accommodation not found\" });\n      }\n      \n      res.json(accommodation);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch accommodation\" });\n    }\n  });\n  \n  app.post(\"/api/accommodations\", async (req: Request, res: Response) => {\n    try {\n      const accommodationData = insertAccommodationSchema.parse(req.body);\n      const newAccommodation: Accommodation = await storage.createAccommodation(accommodationData);\n      res.status(201).json(newAccommodation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid accommodation data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create accommodation\" });\n    }\n  });\n  \n  app.put(\"/api/accommodations/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const accommodationData = insertAccommodationSchema.partial().parse(req.body);\n      \n      const updatedAccommodation: Accommodation | undefined = await storage.updateAccommodation(id, accommodationData);\n      \n      if (!updatedAccommodation) {\n        return res.status(404).json({ message: \"Accommodation not found\" });\n      }\n      \n      res.json(updatedAccommodation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid accommodation data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update accommodation\" });\n    }\n  });\n  \n  app.delete(\"/api/accommodations/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const success: boolean = await storage.deleteAccommodation(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Accommodation not found\" });\n      }\n      \n      res.status(204).end();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete accommodation\" });\n    }\n  });\n  \n  // Trips\n  app.get(\"/api/trips\", async (req: Request, res: Response) => {\n    try {\n      const trips: Trip[] = await storage.getTrips();\n      res.json(trips);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trips\" });\n    }\n  });\n  \n  app.get(\"/api/trips/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const trip: Trip | undefined = await storage.getTrip(id);\n      \n      if (!trip) {\n        return res.status(404).json({ message: \"Trip not found\" });\n      }\n      \n      res.json(trip);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trip\" });\n    }\n  });\n  \n  app.post(\"/api/trips\", async (req: Request, res: Response) => {\n    try {\n      const tripData = insertTripSchema.parse(req.body);\n      const newTrip: Trip = await storage.createTrip(tripData);\n      res.status(201).json(newTrip);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid trip data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create trip\" });\n    }\n  });\n  \n  app.put(\"/api/trips/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const tripData = insertTripSchema.partial().parse(req.body);\n      \n      const updatedTrip: Trip | undefined = await storage.updateTrip(id, tripData);\n      \n      if (!updatedTrip) {\n        return res.status(404).json({ message: \"Trip not found\" });\n      }\n      \n      res.json(updatedTrip);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid trip data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update trip\" });\n    }\n  });\n  \n  app.delete(\"/api/trips/:id\", async (req: Request, res: Response) => {\n    try {\n      const id: number = parseInt(req.params.id);\n      const success: boolean = await storage.deleteTrip(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Trip not found\" });\n      }\n      \n      res.status(204).end();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete trip\" });\n    }\n  });\n  \n  // Trip Destinations\n  app.get(\"/api/trips/:tripId/destinations\", async (req: Request, res: Response) => {\n    try {\n      const tripId: number = parseInt(req.params.tripId);\n      const tripDestinations: TripDestination[] = await storage.getTripDestinations(tripId);\n      res.json(tripDestinations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trip destinations\" });\n    }\n  });\n  \n  app.post(\"/api/trips/:tripId/destinations\", async (req: Request, res: Response) => {\n    try {\n      const tripId: number = parseInt(req.params.tripId);\n      const destinationId: number = req.body.destinationId;\n      \n      const tripDestinationData = insertTripDestinationSchema.parse({\n        tripId,\n        destinationId,\n      });\n      \n      const newTripDestination: TripDestination = await storage.addDestinationToTrip(tripDestinationData);\n      res.status(201).json(newTripDestination);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid trip destination data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to add destination to trip\" });\n    }\n  });\n  \n  app.delete(\"/api/trips/:tripId/destinations/:destinationId\", async (req: Request, res: Response) => {\n    try {\n      const tripId: number = parseInt(req.params.tripId);\n      const destinationId: number = parseInt(req.params.destinationId);\n      \n      const success: boolean = await storage.removeDestinationFromTrip(tripId, destinationId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Trip destination not found\" });\n      }\n      \n      res.status(204).end();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to remove destination from trip\" });\n    }\n  });\n  \n  // Dashboard Stats\n  app.get(\"/api/dashboard/stats\", async (req: Request, res: Response) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n  \n  /**\n   * Global error handler middleware\n   * \n   * @description Catches all errors that occur during request processing and formats\n   * consistent JSON responses for the client.\n   * \n   * @param {Error & { status?: number; statusCode?: number }} err - The error object\n   * @param {Request} _req - The Express request object (unused but required)\n   * @param {Response} res - The Express response object used to send the response\n   * @param {NextFunction} _next - The Express next function (unused but required)\n   * \n   * @returns {void}\n   * \n   * @behavior\n   * - Logs the error to the console for server-side debugging\n   * - Uses the error's status/statusCode property if available, defaults to 500\n   * - Returns a JSON response with error.message or a default message if not provided\n   * - Format of response: { error: string }\n   */\n  app.use((err: Error & { status?: number; statusCode?: number }, _req: Request, res: Response, _next: NextFunction): void => {\n    console.error(err);\n    res.status(err.status || err.statusCode || 500).json({ error: err.message || 'Internal error' });\n  });\n  \n  const httpServer = createServer(app);\n  \n  return httpServer;\n}\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/storage.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'sql' is defined but never used.","line":10,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"sql"},"fix":{"range":[400,405],"text":""},"desc":"Remove unused variable 'sql'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":21,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[678,688],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'username' is defined but never used.","line":22,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"username"},"fix":{"range":[738,754],"text":""},"desc":"Remove unused variable 'username'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'email' is defined but never used.","line":23,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"email"},"fix":{"range":[801,814],"text":""},"desc":"Remove unused variable 'email'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is defined but never used.","line":24,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[857,873],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":25,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[904,915],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is defined but never used.","line":25,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[914,941],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":26,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[984,994],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":30,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1098,1108],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'destination' is defined but never used.","line":31,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"destination"},"fix":{"range":[1165,1195],"text":""},"desc":"Remove unused variable 'destination'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":32,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1240,1251],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'destination' is defined but never used.","line":32,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":72,"suggestions":[{"messageId":"removeVar","data":{"varName":"destination"},"fix":{"range":[1250,1291],"text":""},"desc":"Remove unused variable 'destination'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":33,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1348,1358],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":37,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1452,1462],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'destinationId' is defined but never used.","line":38,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"destinationId"},"fix":{"range":[1525,1546],"text":""},"desc":"Remove unused variable 'destinationId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'activity' is defined but never used.","line":39,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"activity"},"fix":{"range":[1587,1611],"text":""},"desc":"Remove unused variable 'activity'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":40,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1650,1661],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'activity' is defined but never used.","line":40,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":63,"suggestions":[{"messageId":"removeVar","data":{"varName":"activity"},"fix":{"range":[1660,1695],"text":""},"desc":"Remove unused variable 'activity'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":41,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1746,1756],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":45,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1868,1878],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'destinationId' is defined but never used.","line":46,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"destinationId"},"fix":{"range":[1950,1971],"text":""},"desc":"Remove unused variable 'destinationId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'accommodation' is defined but never used.","line":47,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":57,"suggestions":[{"messageId":"removeVar","data":{"varName":"accommodation"},"fix":{"range":[2022,2056],"text":""},"desc":"Remove unused variable 'accommodation'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":48,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[2105,2116],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'accommodation' is defined but never used.","line":48,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"accommodation"},"fix":{"range":[2115,2160],"text":""},"desc":"Remove unused variable 'accommodation'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":49,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[2221,2231],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":53,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[2314,2328],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":54,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[2358,2368],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'trip' is defined but never used.","line":55,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"trip"},"fix":{"range":[2411,2427],"text":""},"desc":"Remove unused variable 'trip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":56,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[2458,2469],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'trip' is defined but never used.","line":56,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"trip"},"fix":{"range":[2468,2495],"text":""},"desc":"Remove unused variable 'trip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":57,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[2538,2548],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tripId' is defined but never used.","line":60,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"tripId"},"fix":{"range":[2617,2631],"text":""},"desc":"Remove unused variable 'tripId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tripDestination' is defined but never used.","line":61,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":62,"suggestions":[{"messageId":"removeVar","data":{"varName":"tripDestination"},"fix":{"range":[2685,2723],"text":""},"desc":"Remove unused variable 'tripDestination'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tripId' is defined but never used.","line":62,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"tripId"},"fix":{"range":[2780,2795],"text":""},"desc":"Remove unused variable 'tripId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'destinationId' is defined but never used.","line":62,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":66,"suggestions":[{"messageId":"removeVar","data":{"varName":"destinationId"},"fix":{"range":[2794,2817],"text":""},"desc":"Remove unused variable 'destinationId'."}]}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  destinations, type Destination, type InsertDestination,\n  activities, type Activity, type InsertActivity,\n  accommodations, type Accommodation, type InsertAccommodation,\n  trips, type Trip, type InsertTrip,\n  tripDestinations, type TripDestination, type InsertTripDestination,\n  users, type User, type InsertUser\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, count, sql, gt } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\n// Define the storage interface\nexport interface IStorage {\n  // Session Store\n  sessionStore: session.Store;\n  \n  // Users\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: number): Promise<boolean>;\n  \n  // Destinations\n  getDestinations(): Promise<Destination[]>;\n  getDestination(id: number): Promise<Destination | undefined>;\n  createDestination(destination: InsertDestination): Promise<Destination>;\n  updateDestination(id: number, destination: Partial<InsertDestination>): Promise<Destination | undefined>;\n  deleteDestination(id: number): Promise<boolean>;\n  \n  // Activities\n  getActivities(): Promise<Activity[]>;\n  getActivity(id: number): Promise<Activity | undefined>;\n  getActivitiesByDestination(destinationId: number): Promise<Activity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n  updateActivity(id: number, activity: Partial<InsertActivity>): Promise<Activity | undefined>;\n  deleteActivity(id: number): Promise<boolean>;\n  \n  // Accommodations\n  getAccommodations(): Promise<Accommodation[]>;\n  getAccommodation(id: number): Promise<Accommodation | undefined>;\n  getAccommodationsByDestination(destinationId: number): Promise<Accommodation[]>;\n  createAccommodation(accommodation: InsertAccommodation): Promise<Accommodation>;\n  updateAccommodation(id: number, accommodation: Partial<InsertAccommodation>): Promise<Accommodation | undefined>;\n  deleteAccommodation(id: number): Promise<boolean>;\n  \n  // Trips\n  getTrips(): Promise<Trip[]>;\n  getTripsByUser(userId: number): Promise<Trip[]>;\n  getTrip(id: number): Promise<Trip | undefined>;\n  createTrip(trip: InsertTrip): Promise<Trip>;\n  updateTrip(id: number, trip: Partial<InsertTrip>): Promise<Trip | undefined>;\n  deleteTrip(id: number): Promise<boolean>;\n  \n  // Trip Destinations\n  getTripDestinations(tripId: number): Promise<TripDestination[]>;\n  addDestinationToTrip(tripDestination: InsertTripDestination): Promise<TripDestination>;\n  removeDestinationFromTrip(tripId: number, destinationId: number): Promise<boolean>;\n  \n  // Stats\n  getDashboardStats(): Promise<{\n    upcomingTripsCount: number;\n    destinationsCount: number;\n    activitiesCount: number;\n    accommodationsCount: number;\n  }>;\n}\n\n// Database implementation of the storage interface\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.Store;\n  \n  constructor() {\n    const PostgresSessionStore = connectPg(session);\n    this.sessionStore = new PostgresSessionStore({ \n      pool,\n      createTableIfMissing: true,\n      ttl: 60 * 60 * 24 * 7, // 7 days in seconds\n      pruneSessionInterval: 60 * 60 // 1 hour in seconds\n    });\n  }\n  \n  // Users\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n  \n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n  \n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n  \n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n  \n  async updateUser(id: number, userData: Partial<InsertUser>): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set(userData)\n      .where(eq(users.id, id))\n      .returning();\n    \n    return updatedUser;\n  }\n  \n  async deleteUser(id: number): Promise<boolean> {\n    try {\n      // First update any trips by this user to remove the userId\n      await db\n        .update(trips)\n        .set({ userId: null })\n        .where(eq(trips.userId, id));\n      \n      // Then delete the user\n      const [deleted] = await db\n        .delete(users)\n        .where(eq(users.id, id))\n        .returning({ id: users.id });\n      \n      return !!deleted;\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      return false;\n    }\n  }\n  \n  // Destinations\n  async getDestinations(): Promise<Destination[]> {\n    return await db.select().from(destinations);\n  }\n  \n  async getDestination(id: number): Promise<Destination | undefined> {\n    const [destination] = await db.select().from(destinations).where(eq(destinations.id, id));\n    return destination;\n  }\n  \n  async createDestination(destination: InsertDestination): Promise<Destination> {\n    const [newDestination] = await db.insert(destinations).values(destination).returning();\n    return newDestination;\n  }\n  \n  async updateDestination(id: number, destination: Partial<InsertDestination>): Promise<Destination | undefined> {\n    const [updatedDestination] = await db\n      .update(destinations)\n      .set(destination)\n      .where(eq(destinations.id, id))\n      .returning();\n    \n    return updatedDestination;\n  }\n  \n  async deleteDestination(id: number): Promise<boolean> {\n    try {\n      // First delete any dependent records (activities, accommodations, trip destinations)\n      await db.delete(activities).where(eq(activities.destinationId, id));\n      await db.delete(accommodations).where(eq(accommodations.destinationId, id));\n      await db.delete(tripDestinations).where(eq(tripDestinations.destinationId, id));\n      \n      // Then delete the destination itself\n      const [deleted] = await db\n        .delete(destinations)\n        .where(eq(destinations.id, id))\n        .returning({ id: destinations.id });\n      \n      return !!deleted;\n    } catch (error) {\n      console.error(\"Error deleting destination:\", error);\n      return false;\n    }\n  }\n  \n  // Activities\n  async getActivities(): Promise<Activity[]> {\n    return await db.select().from(activities);\n  }\n  \n  async getActivity(id: number): Promise<Activity | undefined> {\n    const [activity] = await db.select().from(activities).where(eq(activities.id, id));\n    return activity;\n  }\n  \n  async getActivitiesByDestination(destinationId: number): Promise<Activity[]> {\n    return await db.select().from(activities).where(eq(activities.destinationId, destinationId));\n  }\n  \n  async createActivity(activity: InsertActivity): Promise<Activity> {\n    // Add a default image if one isn't provided\n    if (!activity.image) {\n      activity.image = `https://images.unsplash.com/photo-1482784160316-6eb046863ece?q=80&w=2070&auto=format&fit=crop`;\n    }\n    \n    const [newActivity] = await db.insert(activities).values(activity).returning();\n    return newActivity;\n  }\n  \n  async updateActivity(id: number, activity: Partial<InsertActivity>): Promise<Activity | undefined> {\n    const [updatedActivity] = await db\n      .update(activities)\n      .set(activity)\n      .where(eq(activities.id, id))\n      .returning();\n    \n    return updatedActivity;\n  }\n  \n  async deleteActivity(id: number): Promise<boolean> {\n    try {\n      const [deleted] = await db\n        .delete(activities)\n        .where(eq(activities.id, id))\n        .returning({ id: activities.id });\n      \n      return !!deleted;\n    } catch (error) {\n      console.error(\"Error deleting activity:\", error);\n      return false;\n    }\n  }\n  \n  // Accommodations\n  async getAccommodations(): Promise<Accommodation[]> {\n    return await db.select().from(accommodations);\n  }\n  \n  async getAccommodation(id: number): Promise<Accommodation | undefined> {\n    const [accommodation] = await db.select().from(accommodations).where(eq(accommodations.id, id));\n    return accommodation;\n  }\n  \n  async getAccommodationsByDestination(destinationId: number): Promise<Accommodation[]> {\n    return await db.select().from(accommodations).where(eq(accommodations.destinationId, destinationId));\n  }\n  \n  async createAccommodation(accommodation: InsertAccommodation): Promise<Accommodation> {\n    // Add a default image if one isn't provided\n    if (!accommodation.image) {\n      accommodation.image = `https://images.unsplash.com/photo-1551882547-ff40c63fe5fa?q=80&w=2070&auto=format&fit=crop`;\n    }\n    \n    const [newAccommodation] = await db.insert(accommodations).values(accommodation).returning();\n    return newAccommodation;\n  }\n  \n  async updateAccommodation(id: number, accommodation: Partial<InsertAccommodation>): Promise<Accommodation | undefined> {\n    const [updatedAccommodation] = await db\n      .update(accommodations)\n      .set(accommodation)\n      .where(eq(accommodations.id, id))\n      .returning();\n    \n    return updatedAccommodation;\n  }\n  \n  async deleteAccommodation(id: number): Promise<boolean> {\n    try {\n      const [deleted] = await db\n        .delete(accommodations)\n        .where(eq(accommodations.id, id))\n        .returning({ id: accommodations.id });\n      \n      return !!deleted;\n    } catch (error) {\n      console.error(\"Error deleting accommodation:\", error);\n      return false;\n    }\n  }\n  \n  // Trips\n  async getTrips(): Promise<Trip[]> {\n    return await db.select().from(trips);\n  }\n  \n  async getTripsByUser(userId: number): Promise<Trip[]> {\n    return await db.select().from(trips).where(eq(trips.userId, userId));\n  }\n  \n  async getTrip(id: number): Promise<Trip | undefined> {\n    const [trip] = await db.select().from(trips).where(eq(trips.id, id));\n    return trip;\n  }\n  \n  async createTrip(trip: InsertTrip): Promise<Trip> {\n    const [newTrip] = await db.insert(trips).values(trip).returning();\n    return newTrip;\n  }\n  \n  async updateTrip(id: number, trip: Partial<InsertTrip>): Promise<Trip | undefined> {\n    const [updatedTrip] = await db\n      .update(trips)\n      .set(trip)\n      .where(eq(trips.id, id))\n      .returning();\n    \n    return updatedTrip;\n  }\n  \n  async deleteTrip(id: number): Promise<boolean> {\n    try {\n      // First delete any trip destinations for this trip\n      await db.delete(tripDestinations).where(eq(tripDestinations.tripId, id));\n      \n      // Then delete the trip itself\n      const [deleted] = await db\n        .delete(trips)\n        .where(eq(trips.id, id))\n        .returning({ id: trips.id });\n      \n      return !!deleted;\n    } catch (error) {\n      console.error(\"Error deleting trip:\", error);\n      return false;\n    }\n  }\n  \n  // Trip Destinations\n  async getTripDestinations(tripId: number): Promise<TripDestination[]> {\n    return await db.select().from(tripDestinations).where(eq(tripDestinations.tripId, tripId));\n  }\n  \n  async addDestinationToTrip(tripDestination: InsertTripDestination): Promise<TripDestination> {\n    const [newTripDestination] = await db.insert(tripDestinations).values(tripDestination).returning();\n    return newTripDestination;\n  }\n  \n  async removeDestinationFromTrip(tripId: number, destinationId: number): Promise<boolean> {\n    try {\n      const [deleted] = await db\n        .delete(tripDestinations)\n        .where(\n          and(\n            eq(tripDestinations.tripId, tripId),\n            eq(tripDestinations.destinationId, destinationId)\n          )\n        )\n        .returning({ id: tripDestinations.id });\n      \n      return !!deleted;\n    } catch (error) {\n      console.error(\"Error removing destination from trip:\", error);\n      return false;\n    }\n  }\n  \n  // Dashboard stats\n  async getDashboardStats(): Promise<{\n    upcomingTripsCount: number;\n    destinationsCount: number;\n    activitiesCount: number;\n    accommodationsCount: number;\n  }> {\n    // Count upcoming trips (planned trips with start date in the future)\n    const [upcomingTripsResult] = await db\n      .select({ count: count() })\n      .from(trips)\n      .where(\n        and(\n          eq(trips.status, \"planned\"),\n          gt(trips.startDate, new Date().toISOString().split('T')[0])\n        )\n      );\n    \n    // Count total destinations\n    const [destinationsResult] = await db\n      .select({ count: count() })\n      .from(destinations);\n    \n    // Count total activities\n    const [activitiesResult] = await db\n      .select({ count: count() })\n      .from(activities);\n    \n    // Count total accommodations\n    const [accommodationsResult] = await db\n      .select({ count: count() })\n      .from(accommodations);\n    \n    return {\n      upcomingTripsCount: Number(upcomingTripsResult.count),\n      destinationsCount: Number(destinationsResult.count),\n      activitiesCount: Number(activitiesResult.count),\n      accommodationsCount: Number(accommodationsResult.count)\n    };\n  }\n}\n\n// Create a seed data class to initialize the database with sample data if needed\nexport class DataSeeder {\n  private storage: IStorage;\n  \n  constructor(storage: IStorage) {\n    this.storage = storage;\n  }\n  \n  async seedDatabase() {\n    try {\n      // Check if there's already data in the destinations table\n      const existingDestinations = await this.storage.getDestinations();\n      \n      if (existingDestinations.length === 0) {\n        console.log(\"Seeding database with initial data...\");\n        \n        // Sample destinations\n        const sampleDestinations: InsertDestination[] = [\n          { name: \"Paris\", country: \"France\", region: \"Europe\", image: \"https://images.unsplash.com/photo-1502602898657-3e91760cbb34\", status: \"visited\" },\n          { name: \"Tokyo\", country: \"Japan\", region: \"Asia\", image: \"https://images.unsplash.com/photo-1536098561742-ca998e48cbcc\", status: \"planned\" },\n          { name: \"Sydney\", country: \"Australia\", region: \"Oceania\", image: \"https://images.unsplash.com/photo-1506973035872-a4ec16b8e8d9\", status: \"wishlist\" },\n          { name: \"Venice\", country: \"Italy\", region: \"Europe\", image: \"https://images.unsplash.com/photo-1523906834658-6e24ef2386f9\", status: \"visited\" },\n          { name: \"Santorini\", country: \"Greece\", region: \"Europe\", image: \"https://images.unsplash.com/photo-1570077188670-e3a8d69ac5ff\", status: \"wishlist\" },\n          { name: \"Machu Picchu\", country: \"Peru\", region: \"South America\", image: \"https://images.unsplash.com/photo-1526392060635-9d6019884377\", status: \"planned\" },\n        ];\n        \n        // Create destinations and store their IDs\n        const destinationMap = new Map<string, number>();\n        \n        for (const dest of sampleDestinations) {\n          const newDest = await this.storage.createDestination(dest);\n          destinationMap.set(dest.name, newDest.id);\n        }\n        \n        // Sample activities\n        const sampleActivities: InsertActivity[] = [\n          { name: \"Eiffel Tower Visit\", description: \"Visit the iconic Eiffel Tower\", category: \"Sightseeing\", destinationId: destinationMap.get(\"Paris\")!, image: \"https://images.unsplash.com/photo-1543349689-9a4d426bee8e\" },\n          { name: \"Louvre Museum\", description: \"Explore art at the Louvre\", category: \"Culture\", destinationId: destinationMap.get(\"Paris\")!, image: \"https://images.unsplash.com/photo-1565783795132-13a333cdcd75\" },\n          { name: \"Tokyo Skytree\", description: \"Visit one of the tallest towers in the world\", category: \"Sightseeing\", destinationId: destinationMap.get(\"Tokyo\")!, image: \"https://images.unsplash.com/photo-1536984456083-d957495fb197\" },\n          { name: \"Sydney Opera House Tour\", description: \"Tour the famous Sydney Opera House\", category: \"Culture\", destinationId: destinationMap.get(\"Sydney\")!, image: \"https://images.unsplash.com/photo-1510162548618-d50a4c4c8d18\" },\n        ];\n        \n        for (const activity of sampleActivities) {\n          await this.storage.createActivity(activity);\n        }\n        \n        // Sample accommodations\n        const sampleAccommodations: InsertAccommodation[] = [\n          { name: \"Hotel de Paris\", type: \"Hotel\", destinationId: destinationMap.get(\"Paris\")!, image: \"https://images.unsplash.com/photo-1566073771259-6a8506099945\" },\n          { name: \"Tokyo Bay Resort\", type: \"Resort\", destinationId: destinationMap.get(\"Tokyo\")!, image: \"https://images.unsplash.com/photo-1520250497591-112f2f40a3f4\" },\n          { name: \"Sydney Harbor View\", type: \"Apartment\", destinationId: destinationMap.get(\"Sydney\")!, image: \"https://images.unsplash.com/photo-1522708323590-d24dbb6b0267\" },\n          { name: \"Venice Canal House\", type: \"Guesthouse\", destinationId: destinationMap.get(\"Venice\")!, image: \"https://images.unsplash.com/photo-1516455590571-18256e5bb9ff\" },\n        ];\n        \n        for (const accommodation of sampleAccommodations) {\n          await this.storage.createAccommodation(accommodation);\n        }\n        \n        // Sample trips\n        const today = new Date();\n        const nextMonth = new Date(today);\n        nextMonth.setMonth(today.getMonth() + 1);\n        \n        const lastMonth = new Date(today);\n        lastMonth.setMonth(today.getMonth() - 1);\n        \n        const twoMonthsAgo = new Date(today);\n        twoMonthsAgo.setMonth(today.getMonth() - 2);\n        \n        const sampleTrips: InsertTrip[] = [\n          { name: \"Japan Adventure\", startDate: nextMonth.toISOString().split('T')[0], endDate: new Date(nextMonth.getTime() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], status: \"planned\" },\n          { name: \"Bali Getaway\", startDate: twoMonthsAgo.toISOString().split('T')[0], endDate: new Date(twoMonthsAgo.getTime() + 10 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], status: \"completed\" },\n          { name: \"Swiss Alps Adventure\", startDate: lastMonth.toISOString().split('T')[0], endDate: new Date(lastMonth.getTime() + 8 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], status: \"completed\" },\n          { name: \"New York City Trip\", startDate: new Date(lastMonth.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], endDate: new Date(lastMonth.getTime() - 24 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], status: \"completed\" },\n        ];\n        \n        // Create trips and store their IDs\n        const tripMap = new Map<string, number>();\n        \n        for (const trip of sampleTrips) {\n          const newTrip = await this.storage.createTrip(trip);\n          tripMap.set(trip.name, newTrip.id);\n        }\n        \n        // Link trips to destinations\n        await this.storage.addDestinationToTrip({ tripId: tripMap.get(\"Japan Adventure\")!, destinationId: destinationMap.get(\"Tokyo\")! });\n        await this.storage.addDestinationToTrip({ tripId: tripMap.get(\"Bali Getaway\")!, destinationId: destinationMap.get(\"Paris\")! }); // Just for example\n        await this.storage.addDestinationToTrip({ tripId: tripMap.get(\"Swiss Alps Adventure\")!, destinationId: destinationMap.get(\"Venice\")! }); // Just for example\n        await this.storage.addDestinationToTrip({ tripId: tripMap.get(\"New York City Trip\")!, destinationId: destinationMap.get(\"Sydney\")! }); // Just for example\n        \n        console.log(\"Database seeded successfully\");\n      } else {\n        console.log(\"Database already contains data, skipping seed\");\n      }\n    } catch (error) {\n      console.error(\"Error seeding database:\", error);\n    }\n  }\n}\n\n// Create and export the database storage\nexport const storage = new DatabaseStorage();\n\n// Seed the database if needed\nconst seeder = new DataSeeder(storage);\nseeder.seedDatabase().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/utils/__tests__/env.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/utils/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/utils/errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/vite-declaration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/server/vite.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/root/travel_app/shared/schema.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'boolean' is defined but never used.","line":1,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"boolean"},"fix":{"range":[45,54],"text":""},"desc":"Remove unused variable 'boolean'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { pgTable, text, serial, integer, date, boolean, timestamp, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Destination table\nexport const destinations = pgTable(\"destinations\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  country: text(\"country\").notNull(),\n  region: text(\"region\").notNull(),\n  image: text(\"image\").notNull(),\n  status: text(\"status\").notNull().default(\"wishlist\"), // wishlist, planned, visited\n});\n\nexport const destinationsRelations = relations(destinations, ({ many }) => ({\n  activities: many(activities),\n  accommodations: many(accommodations),\n  tripDestinations: many(tripDestinations),\n}));\n\nexport const insertDestinationSchema = createInsertSchema(destinations).omit({\n  id: true,\n});\n\nexport type InsertDestination = z.infer<typeof insertDestinationSchema>;\nexport type Destination = typeof destinations.$inferSelect;\n\n// Activity table\nexport const activities = pgTable(\"activities\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  destinationId: integer(\"destination_id\").notNull(),\n  image: text(\"image\"),\n});\n\nexport const activitiesRelations = relations(activities, ({ one }) => ({\n  destination: one(destinations, {\n    fields: [activities.destinationId],\n    references: [destinations.id],\n  }),\n}));\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n});\n\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type Activity = typeof activities.$inferSelect;\n\n// Accommodation table\nexport const accommodations = pgTable(\"accommodations\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(),\n  destinationId: integer(\"destination_id\").notNull(),\n  image: text(\"image\"),\n});\n\nexport const accommodationsRelations = relations(accommodations, ({ one }) => ({\n  destination: one(destinations, {\n    fields: [accommodations.destinationId],\n    references: [destinations.id],\n  }),\n}));\n\nexport const insertAccommodationSchema = createInsertSchema(accommodations).omit({\n  id: true,\n});\n\nexport type InsertAccommodation = z.infer<typeof insertAccommodationSchema>;\nexport type Accommodation = typeof accommodations.$inferSelect;\n\n// Trip table\nexport const trips = pgTable(\"trips\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  status: text(\"status\").notNull().default(\"planned\"), // planned, completed, cancelled\n  userId: integer(\"user_id\"),\n});\n\nexport const tripsRelations = relations(trips, ({ many, one }) => ({\n  tripDestinations: many(tripDestinations),\n  user: one(users, {\n    fields: [trips.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertTripSchema = createInsertSchema(trips).omit({\n  id: true,\n});\n\nexport type InsertTrip = z.infer<typeof insertTripSchema>;\nexport type Trip = typeof trips.$inferSelect;\n\n// Trip Destinations (to handle the many-to-many relationship)\nexport const tripDestinations = pgTable(\"trip_destinations\", {\n  id: serial(\"id\").primaryKey(),\n  tripId: integer(\"trip_id\").notNull(),\n  destinationId: integer(\"destination_id\").notNull(),\n});\n\nexport const tripDestinationsRelations = relations(tripDestinations, ({ one }) => ({\n  trip: one(trips, {\n    fields: [tripDestinations.tripId],\n    references: [trips.id],\n  }),\n  destination: one(destinations, {\n    fields: [tripDestinations.destinationId],\n    references: [destinations.id],\n  }),\n}));\n\nexport const insertTripDestinationSchema = createInsertSchema(tripDestinations).omit({\n  id: true,\n});\n\nexport type InsertTripDestination = z.infer<typeof insertTripDestinationSchema>;\nexport type TripDestination = typeof tripDestinations.$inferSelect;\n\n// User table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  bio: text(\"bio\"),\n  location: text(\"location\"),\n  phone: text(\"phone\"),\n  avatar: text(\"avatar\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  lastLogin: timestamp(\"last_login\"),\n  loginCount: integer(\"login_count\").notNull().default(0),\n}, (table) => {\n  /**\n   * Index for fast username lookups used in authentication flows\n   * \n   * This index significantly improves the performance of queries that filter\n   * or join on the username column, especially for the getUserByUsername function.\n   * \n   * Without this index, username lookups would require a full table scan, which\n   * becomes increasingly inefficient as the user table grows.\n   * \n   * Drizzle migrations will automatically generate the appropriate SQL to\n   * create this index in the database.\n   */\n  return {\n    usernameIdx: index(\"username_idx\").on(table.username),\n    \n    /**\n     * Index for fast email lookups used in authentication and user verification\n     * \n     * This index optimizes queries that search by email address, such as password\n     * reset flows, email verification, and checking for duplicate emails during\n     * registration.\n     * \n     * Email lookups are common operations in user management workflows, and\n     * this index ensures they remain fast even with large user tables.\n     * \n     * Drizzle migrations will automatically generate the appropriate SQL to\n     * create this index in the database.\n     */\n    emailIdx: index(\"email_idx\").on(table.email)\n  };\n});\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  trips: many(trips),\n}));\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","usedDeprecatedRules":[]}]